{"componentChunkName":"component---src-templates-blog-template-js","path":"/Book/Js_ch3/","result":{"data":{"cur":{"id":"194d2e0a-80dd-5e69-bb4e-fc64cf362a68","html":"<h1 id=\"큰-정수\" style=\"position:relative;\"><a href=\"#%ED%81%B0-%EC%A0%95%EC%88%98\" aria-label=\"큰 정수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큰 정수</h1>\n<p>자바스크립트의 큰 단점 중 하나는 64비트 정수가 없다는 것입니다.<br>\nint64형은 최대 923372036854775807까지의 정수를 담을 수 있는데<br>\n이것은 자바스크립트의 Number.MAX SAFE INTEGER 범위인 90071992547409에\r\n벗어납니다.</p>\n<h2 id=\"숫자형-추가의-문제점\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90%ED%98%95-%EC%B6%94%EA%B0%80%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"숫자형 추가의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자형 추가의 문제점</h2>\n<p>그렇다면 다른 언어들이 여러개의 숫자형을 가지고 있는 것처럼 자바스크립트에도<br>\n추가하는 생각이 들 수 있겠지만 문제가 있습니다.</p>\n<p>그 이유는 단순성을 잃게 되고, 잠재적을 다른 버그를 초래할 가능성이 커지게<br>\n되기 때문입니다. 모든 자료형 선언과 자료형 변환은 잠재적인 오류입니다.</p>\n<p>이 책에서는 큰 정수를 언어에 내장하는것 대신에 라이브러리 형태로 제공했어야<br>\n한다고 말합니다. 언어를 사용하는 대부분의 사용자는 큰 정수를 사용하지 않고<br>\n큰 정수는 현재의 숫자형으로 풀 수 없는 가장 큰 문제를 해결해 주지도 못하기 때문입니다.</p>","excerpt":"큰 정수 자바스크립트의 큰 단점 중 하나는 64비트 정수가 없다는 것입니다. int64형은 최대 923372036854775807까지의 정수를 담을 수 있는데 이것은 자바스크립트의 Number.MAX SAFE INTEGER 범위인 90071992547409에\r\n벗어납니다. 숫자형 추가의 문제점 그렇다면 다른 언어들이 여러개의 숫자형을 가지고 있는 것처럼 자바스크립트에도 추가하는 생각이 들 수 있겠지만 문제가 있습니다. 그 이유는 단순성을 잃게 되고, 잠재적을 다른 버그를 초래할 가능성이 커지게 되기 때문입니다. 모든 자료형 선언과 자료형 변환은 잠재적인 오류입니다. 이 책에서는 큰 정수를 언어에 내장하는것 대신에 라이브러리 형태로 제공했어야 한다고 말합니다. 언어를 사용하는 대부분의 사용자는 큰 정수를 사용하지 않고 큰 정수는 현재의 숫자형으로 풀 수 없는 가장 큰 문제를 해결해 주지도 못하기 때문입니다.","frontmatter":{"date":"June 05, 2023","title":"자바스크립트는 왜 그 모양일까 Chapter(3) 큰 정수","categories":"Js Book","author":"Js","emoji":"📚"},"fields":{"slug":"/Book/Js_ch3/"}},"next":{"id":"523c0212-fde0-5aed-afff-33e84747c659","html":"<h1 id=\"number\" style=\"position:relative;\"><a href=\"#number\" aria-label=\"number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>number</h1>\n<p>자바스크립트는 <code class=\"language-text\">number</code>라고 하는 하나의 숫자형을 가지고 있습니다.<br>\nnumber는 인텔의 iAPX-432 프로세서를 위해 처음 개발된 IEEE 부동소수점<br>\n연산 표준 (IEEE 754)을 차용했습니다. 자바스크립트는 숫자형이 하나뿐 이라는 단점을<br>\n가지고 있다고 비판 받았지만 오히려 개발자의 생산성을 증가시키게 되었습니다.<br>\n왜냐하면 비슷한 여러가지 타입 중 잘못된 타입을 사용할까 봐 고민하며<br>\n시간을 낭비하지 않아도 되기 때문입니다.</p>\n<h2 id=\"숫자-0\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90-0\" aria-label=\"숫자 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 0</h2>\n<p>자바스크립트에는 0으로 표시되지만 0이 아닌 값이 있습니다다.<br>\nIEEE 754 표준에는 0과 -0 이라는 두 개의 0이 존재하고<br>\n다음 경우를 제외하고는 -0의 존재를 무시해도 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(1 / 0) === (1 / -0) // false   \r\nObject.is(0 , -0) // false  </code></pre></div>\n<h2 id=\"숫자-리터럴\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"숫자 리터럴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 리터럴</h2>\n<p>숫자 리터럴은 각 리터럴의 값과 가장 잘 맛는 숫자 객체에 대한 참조를 생성합니다<br>\n어떤경우네는 딱 맞는 값이고 어떤 경우에는 실제 값과 미세한 차이가 나기도 합니다.</p>\n<h2 id=\"nan\" style=\"position:relative;\"><a href=\"#nan\" aria-label=\"nan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaN</h2>\n<p><code class=\"language-text\">NaN</code>은 숫자가 아닌 숫자를 나타내는 값 입니다.<br>\n<code class=\"language-text\">NaN</code>은 <code class=\"language-text\">\"Not a Number\"</code>를 의미하고 typeof 연산자는<br>\n<code class=\"language-text\">NaN</code>을 <code class=\"language-text\">\"number\"</code> 형으로 표시되어 매우 헷갈린다.</p>\n<p><code class=\"language-text\">NaN</code>은 문자열을 숫자로 변환하려고 했으나 실패했을 때 결과값을 반환될 수 있다.<br>\n변환에 실패한 경우 오류가 발생하거나 프로그램이 멈추는 대시 <code class=\"language-text\">NaN</code>이 반환된다.<br>\n산술 연산자 입력 중에도 <code class=\"language-text\">NaN</code>이 있어도 결과값으로 <code class=\"language-text\">NaN</code>을 반환한다.</p>\n<p><code class=\"language-text\">NaN</code>은 자바스크립트가 숨기지 않은 IEEE 754의 단점인 부분이다.<br>\n<code class=\"language-text\">NaN</code> 과 <code class=\"language-text\">NaN</code>을 동등 연산자로 비교해 보면 서로 다른 결과를 보여주기 때문이다.<br>\n테스트의 기댓값이 <code class=\"language-text\">NaN</code>이고 실제 값이 <code class=\"language-text\">NaN</code>이라고 해도 항상 실패하게 된다.<br>\n그래서 값이 <code class=\"language-text\">NaN</code>인지 아닌지를 확인하기 위해서는 <code class=\"language-text\">Number.isNaN(value)</code>을 사용해 보면 된다.</p>\n<h2 id=\"number-1\" style=\"position:relative;\"><a href=\"#number-1\" aria-label=\"number 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number</h2>\n<p><code class=\"language-text\">Number</code>는 숫자를 만드는 함수입니다. 여기서 주의할 점은 수에 대한 <code class=\"language-text\">typeof</code> 연사자는<br>\n<code class=\"language-text\">\"number\"</code>를 반환하는데 이 둘은 엄연히 다르고 헷갈리시면 안됩니다!</p>\n<p>NUMBER.MAX_SAFE_INTEGER는 약 9천조입니다. 자바스크립트의 숫자형은<br>\nNumber.MAX_SAFE_INTEGER까지의 모든 정수형을 표현할 수 있어 다른 정수형\r\n타입이 필요 없다.</p>\n<p>Number.MAX_SAFE_INTEGER보다 큰 수에 1을 더하는 것은 0을 더하는 것이나 같다.\r\n-Number.MAX_SAFE_INTEGER와 Number.MAX_SAFE_INTEGER 사이의<br>\n정수 값인 경우에만 올바른 정수 연산을 할 수 있습니다.<br>\n이 범위 내에서는 일반적인 수학적 연산, 결합법칙, 분배법칙이 적용 된다.<br>\n만약 이 범위를 벗어나는 경우에는 더하는 순서에 따라 값이 바뀔 수도 있다.</p>","frontmatter":{"date":"June 05, 2023","title":"자바스크립트는 왜 그 모양일까 Chapter(2) 숫자","categories":"Js Book","author":"Js","emoji":"📚"},"fields":{"slug":"/Book/Js_ch2/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/dony0720","comments":{"utterances":{"repo":"dony0720/dony0720.github.io"}}}}},"pageContext":{"slug":"/Book/Js_ch3/","nextSlug":"/Book/Js_ch2/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}