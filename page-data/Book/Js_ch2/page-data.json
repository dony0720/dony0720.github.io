{"componentChunkName":"component---src-templates-blog-template-js","path":"/Book/Js_ch2/","result":{"data":{"cur":{"id":"523c0212-fde0-5aed-afff-33e84747c659","html":"<h1 id=\"number\" style=\"position:relative;\"><a href=\"#number\" aria-label=\"number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>number</h1>\n<p>자바스크립트는 <code class=\"language-text\">number</code>라고 하는 하나의 숫자형을 가지고 있습니다.<br>\nnumber는 인텔의 iAPX-432 프로세서를 위해 처음 개발된 IEEE 부동소수점<br>\n연산 표준 (IEEE 754)을 차용했습니다. 자바스크립트는 숫자형이 하나뿐 이라는 단점을<br>\n가지고 있다고 비판 받았지만 오히려 개발자의 생산성을 증가시키게 되었습니다.<br>\n왜냐하면 비슷한 여러가지 타입 중 잘못된 타입을 사용할까 봐 고민하며<br>\n시간을 낭비하지 않아도 되기 때문입니다.</p>\n<h2 id=\"숫자-0\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90-0\" aria-label=\"숫자 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 0</h2>\n<p>자바스크립트에는 0으로 표시되지만 0이 아닌 값이 있습니다다.<br>\nIEEE 754 표준에는 0과 -0 이라는 두 개의 0이 존재하고<br>\n다음 경우를 제외하고는 -0의 존재를 무시해도 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(1 / 0) === (1 / -0) // false   \r\nObject.is(0 , -0) // false  </code></pre></div>\n<h2 id=\"숫자-리터럴\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"숫자 리터럴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 리터럴</h2>\n<p>숫자 리터럴은 각 리터럴의 값과 가장 잘 맛는 숫자 객체에 대한 참조를 생성합니다<br>\n어떤경우네는 딱 맞는 값이고 어떤 경우에는 실제 값과 미세한 차이가 나기도 합니다.</p>\n<h2 id=\"nan\" style=\"position:relative;\"><a href=\"#nan\" aria-label=\"nan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaN</h2>\n<p><code class=\"language-text\">NaN</code>은 숫자가 아닌 숫자를 나타내는 값 입니다.<br>\n<code class=\"language-text\">NaN</code>은 <code class=\"language-text\">\"Not a Number\"</code>를 의미하고 typeof 연산자는<br>\n<code class=\"language-text\">NaN</code>을 <code class=\"language-text\">\"number\"</code> 형으로 표시되어 매우 헷갈린다.</p>\n<p><code class=\"language-text\">NaN</code>은 문자열을 숫자로 변환하려고 했으나 실패했을 때 결과값을 반환될 수 있다.<br>\n변환에 실패한 경우 오류가 발생하거나 프로그램이 멈추는 대시 <code class=\"language-text\">NaN</code>이 반환된다.<br>\n산술 연산자 입력 중에도 <code class=\"language-text\">NaN</code>이 있어도 결과값으로 <code class=\"language-text\">NaN</code>을 반환한다.</p>\n<p><code class=\"language-text\">NaN</code>은 자바스크립트가 숨기지 않은 IEEE 754의 단점인 부분이다.<br>\n<code class=\"language-text\">NaN</code> 과 <code class=\"language-text\">NaN</code>을 동등 연산자로 비교해 보면 서로 다른 결과를 보여주기 때문이다.<br>\n테스트의 기댓값이 <code class=\"language-text\">NaN</code>이고 실제 값이 <code class=\"language-text\">NaN</code>이라고 해도 항상 실패하게 된다.<br>\n그래서 값이 <code class=\"language-text\">NaN</code>인지 아닌지를 확인하기 위해서는 <code class=\"language-text\">Number.isNaN(value)</code>을 사용해 보면 된다.</p>\n<h2 id=\"number-1\" style=\"position:relative;\"><a href=\"#number-1\" aria-label=\"number 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number</h2>\n<p><code class=\"language-text\">Number</code>는 숫자를 만드는 함수입니다. 여기서 주의할 점은 수에 대한 <code class=\"language-text\">typeof</code> 연사자는<br>\n<code class=\"language-text\">\"number\"</code>를 반환하는데 이 둘은 엄연히 다르고 헷갈리시면 안됩니다!</p>\n<p>NUMBER.MAX_SAFE_INTEGER는 약 9천조입니다. 자바스크립트의 숫자형은<br>\nNumber.MAX_SAFE_INTEGER까지의 모든 정수형을 표현할 수 있어 다른 정수형\r\n타입이 필요 없다.</p>\n<p>Number.MAX_SAFE_INTEGER보다 큰 수에 1을 더하는 것은 0을 더하는 것이나 같다.\r\n-Number.MAX_SAFE_INTEGER와 Number.MAX_SAFE_INTEGER 사이의<br>\n정수 값인 경우에만 올바른 정수 연산을 할 수 있습니다.<br>\n이 범위 내에서는 일반적인 수학적 연산, 결합법칙, 분배법칙이 적용 된다.<br>\n만약 이 범위를 벗어나는 경우에는 더하는 순서에 따라 값이 바뀔 수도 있다.</p>","excerpt":"number 자바스크립트는 라고 하는 하나의 숫자형을 가지고 있습니다. number는 인텔의 iAPX-432 프로세서를 위해 처음 개발된 IEEE 부동소수점 연산 표준 (IEEE 754)을 차용했습니다. 자바스크립트는 숫자형이 하나뿐 이라는 단점을 가지고 있다고 비판 받았지만 오히려 개발자의 생산성을 증가시키게 되었습니다. 왜냐하면 비슷한 여러가지 타입 중 잘못된 타입을 사용할까 봐 고민하며 시간을 낭비하지 않아도 되기 때문입니다. 숫자 0 자바스크립트에는 0으로 표시되지만 0이 아닌 값이 있습니다다. IEEE 754 표준에는 0과 -0 이라는 두 개의 0이 존재하고 다음 경우를 제외하고는 -0의 존재를 무시해도 됩니다. 숫자 리터럴 숫자 리터럴은 각 리터럴의 값과 가장 잘 맛는 숫자 객체에 대한 참조를 생성합니다 어떤경우네는 딱 맞는 값이고 어떤 경우에는 실제 값과 미세한 차이가 나기도 합니다. NaN 은 숫자가 아닌 숫자를 나타내는 값 입니다. 은 를 의미하고 typeof 연산…","frontmatter":{"date":"June 05, 2023","title":"자바스크립트는 왜 그 모양일까 2","categories":"Book","author":"Js","emoji":"📚"},"fields":{"slug":"/Book/Js_ch2/"}},"next":{"id":"62dd5126-3f85-526c-bb99-3662192a0689","html":"<h2 id=\"큰-정수\" style=\"position:relative;\"><a href=\"#%ED%81%B0-%EC%A0%95%EC%88%98\" aria-label=\"큰 정수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큰 정수</h2>\n<p>자바스크립트의 큰 단점 중 하나는 64비트 정수가 없다는 것입니다.<br>\nint64형은 최대 923372036854775807까지의 정수를 담을 수 있는데<br>\n이것은 자바스크립트의 Number.MAX SAFE INTEGER 범위인 90071992547409에\r\n벗어납니다.</p>\n<h2 id=\"숫자형-추가의-문제점\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90%ED%98%95-%EC%B6%94%EA%B0%80%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"숫자형 추가의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자형 추가의 문제점</h2>\n<p>그렇다면 다른 언어들이 여러개의 숫자형을 가지고 있는 것처럼 자바스크립트에도<br>\n추가하는 생각이 들 수 있겠지만 문제가 있습니다.</p>\n<p>그 이유는 단순성을 잃게 되고, 잠재적을 다른 버그를 초래할 가능성이 커지게<br>\n되기 때문입니다. 모든 자료형 선언과 자료형 변환은 잠재적인 오류입니다.</p>\n<p>이 책에서는 큰 정수를 언어에 내장하는것 대신에 라이브러리 형태로 제공했어야<br>\n한다고 말합니다. 언어를 사용하는 대부분의 사용자는 큰 정수를 사용하지 않고<br>\n큰 정수는 현재의 숫자형으로 풀 수 없는 가장 큰 문제를 해결해 주지도 못하기 때문입니다.</p>\n<h2 id=\"큰-부동소수점\" style=\"position:relative;\"><a href=\"#%ED%81%B0-%EB%B6%80%EB%8F%99%EC%86%8C%EC%88%98%EC%A0%90\" aria-label=\"큰 부동소수점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큰 부동소수점</h2>\n<p>부동소수점 시스템은 세 가지\t숫자,즉 계수(coefHCient)와 지수(exponent),<br>\n그리고 밑수(basis)로 구성됩니다. 이 세 개의 숫자로 값을 정할 수 있기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">값 = 계수 * (밑수 ** 지수)\r\n1.2345 = 12345 * (10 ** -4)</code></pre></div>\n<h2 id=\"thank-you-moores-law\" style=\"position:relative;\"><a href=\"#thank-you-moores-law\" aria-label=\"thank you moores law permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thank you Moore’s Law</h2>\n<p>자바스크립트가 차용한 IEEE 754 규격은 부동소수점 수의 밑수로 2를 사용합니다.<br>\nTMI이지만(?) 1950년대 하드웨어는 밑수가 2인 부동소수점 시스템과 잘 맞았다고 합니다.<br>\n무어의 법칙(반도체 칩에 집적할 수 있는 트랜지스터의 숫자가 적어도 매 18개월마다<br>\n두 배씩 증가한다는 법칙) 덕분에, 이제는 밑수를 2로 써야만 하는 제약이 없어졌습니다.<br>\n그러니 이제 다른 밑수를 사용해도 관계 없습니다.</p>\n<p>이 책에서는 밑수가 10이어야 한다고 생각합니다. 밑수가 10이면 10진 분수 값을<br>\n정확하게 표현할 수 있기 때문입니다. 대부분의 사람이 10진수를 사용하기 때문에<br>\n밑수가 10인 부동소수점 시스템은 사람에게 아주 좋은 시스템이라고 합니다.</p>","frontmatter":{"date":"June 05, 2023","title":"자바스크립트는 왜 그 모양일까 3","categories":"Book","author":"Js","emoji":"📚"},"fields":{"slug":"/Book/Js_ch3_4_5/"}},"prev":{"id":"eb6588d5-d49b-544a-aab2-f30747ffc954","html":"<h1 id=\"nullish란\" style=\"position:relative;\"><a href=\"#nullish%EB%9E%80\" aria-label=\"nullish란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nullish란</h1>\n<p>nullish 병합 연산자 (??) 는 왼쪽 피연산자가 <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>일 때 오른쪽 피연산자를 반환하고,<br>\n그렇지 않으면 왼쪽 피연산자를 반환하는 논리 연산자이다.</p>\n<p>a ?? b의 평가 결과는 다음과 같습니다.</p>\n<ul>\n<li>a가 null도 아니고 undefined도 아니면 a</li>\n<li>그 외의 경우는 b</li>\n</ul>\n<p>nullish 병합 연산자 ??없이 x = a ?? b와 동일한 동작을 하는 코드를 작성하면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = (a !== null &amp;&amp; a !== undefined) ? a : b;</code></pre></div>\n<p>다른 예시를 보겠습니다!!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let firstName = null;\r\nlet lastName = null;\r\nlet nickName = \"바이올렛\";\r\n\r\n// null이나 undefined가 아닌 첫 번째 피연산자를 출력한다\r\nconsole.log(firstName ?? lastName ?? nickName ?? \"익명의 사용자\"); // 바이올렛</code></pre></div>\n<p>지금은 firstName, lastName 이 <code class=\"language-text\">null</code> 이기 때문에 nickName을 반환합니다.<br>\n하지만 nickName까지 null 또는 undefined면 “익명의 사용자”가 반환되겠죠?</p>\n<h2 id=\"와-의-차이\" style=\"position:relative;\"><a href=\"#%EC%99%80-%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"와 의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>”??“와 ”||“의 차이</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let height = 0;\r\n\r\nconsole.log(height || 100); // 100\r\nconsole.log(height ?? 100); // 0 </code></pre></div>\n<h3 id=\"height--100-결과\" style=\"position:relative;\"><a href=\"#height--100-%EA%B2%B0%EA%B3%BC\" aria-label=\"height  100 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>height || 100 결과</h3>\n<p>height에 0을 할당했지만 0을 falsy 한 값으로 취급했기 때문에 null이나 undefined를<br>\n할당한 것과 동일하게 처리합니다. 따라서 height || 100의 평가 결과는 100입니다.</p>\n<h3 id=\"height--100-결과-1\" style=\"position:relative;\"><a href=\"#height--100-%EA%B2%B0%EA%B3%BC-1\" aria-label=\"height  100 결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>height ?? 100 결과</h3>\n<p>height가 정확하게 null이나 undefined일 경우에만 100이 됩니다.<br>\n예시에선 height에 0이라는 값을 할당했기 때문에 콘솔창에 0이 출력됩니다.</p>\n<p>이런 특징 때문에 높이처럼 0이 할당될 수 있는 변수를 사용해서 기능을 개발할 땐<br>\n||보다 ??가 적합합니다.</p>\n<h2 id=\"연산자-우선순위\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"연산자 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연산자 우선순위</h2>\n<p>??의 연산자 우선순위는 5로 꽤 낮습니다.</p>\n<p>따라서 ??는 =와 ? 보다는 먼저, 대부분의 연산자보다는 나중에 평가됩니다.</p>\n<p>그렇기 때문에 복잡한 표현식 안에서 ??를 사용해 값을 하나 선택할 땐<br>\n괄호를 추가하는 게 좋습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let height = null;\r\nlet width = null;\r\n\r\n// 괄호를 추가!\r\nlet area = (height ?? 100) * (width ?? 50);\r\n\r\nalert(area); </code></pre></div>\n<p>그렇지 않으면 *가 ??보다 우선순위가 높기 때문에 *가 먼저 실행 아래와 같게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let area = height ?? (100 * width) ?? 50;</code></pre></div>\n<h2 id=\"no-chaining-with-and-or-or-operators\" style=\"position:relative;\"><a href=\"#no-chaining-with-and-or-or-operators\" aria-label=\"no chaining with and or or operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No chaining with AND or OR operators</h2>\n<p>AND (&#x26;&#x26;) 와 OR 연산자 (||)를 ??와 직접적으로 결합하여 사용하는 것은 불가능하다.<br>\n이 경우 <code class=\"language-text\">SyntaxError</code>가 발생된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">null || undefined ?? \"foo\"; // SyntaxError 발생\r\ntrue || undefined ?? \"foo\"; // SyntaxError 발생</code></pre></div>\n<p>위와 같은 상황을 해결하고 위해서 우선 순위를 명시적으로 나타내 괄호를 사용하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(null || undefined ) ?? \"foo\"; // \"foo\" 반환 </code></pre></div>\n<p>참고 : <a href=\"https://ko.javascript.info/nullish-coalescing-operator\">https://ko.javascript.info/nullish-coalescing-operator</a><br>\n참고 : <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing</a></p>","frontmatter":{"date":"June 09, 2023","title":"Nullish 병합 연산자 (??)","categories":"Js","author":"Js","emoji":"📝"},"fields":{"slug":"/Js/nullish/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/dony0720","comments":{"utterances":{"repo":"dony0720/dony0720.github.io"}}}}},"pageContext":{"slug":"/Book/Js_ch2/","nextSlug":"/Book/Js_ch3_4_5/","prevSlug":"/Js/nullish/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}