{"componentChunkName":"component---src-templates-blog-template-js","path":"/Programmers/Day54/","result":{"data":{"cur":{"id":"5dc2721f-ace8-5ece-85ae-7eff46f796df","html":"<h1 id=\"반응형-api-reactivity-api\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-api-reactivity-api\" aria-label=\"반응형 api reactivity api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반응형 API (Reactivity API)</h1>\n<ol>\n<li>반응형 API (Reactivity API)는 데이터의 변경을 자동으로 감지하고, UI를 최신 상태로 유지하는 API이다.</li>\n<li>기본적으로 Vue는 데이터가 변경되면 자동으로 DOM을 업데이트하는데, 이를 가능하게 하는 핵심\n개념이 반응형 시스템(Reactivity System)이다.</li>\n<li>React의 Hooks와 유사한 개념으로 useState를 ref, reactive로 useEffect는 watch와 watchEffect가 대응</li>\n</ol>\n<h2 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ref</h2>\n<ol>\n<li>ref()는 기본 데이터 타입(Number, String, Boolean, Object, Array 등)을 반응형으로 만드는 API 이다.</li>\n<li>기본형을 감싸서(Wrapping)하여 관리함에 따라 .value 속성을 통해 값을 읽고 수정이 가능하다.</li>\n<li>객체를 ref로 감싸면 내부적으로 reactive()와 유사하게 동작하며, reactive 다르게 ref로는 null로 초기화\n가능하고 객체로 할당하는 경우 reactive를 통해 깊숙이(deeply) 반응함으로 속성값 변경도 감지 된다.</li>\n<li>간혹, deep 하게 감지 되지 않는 경우도 존재한다. watch 결합과 같은 경우, 이때는 deep 옵션 활용 필수다</li>\n</ol>\n<h3 id=\"기본형-예제\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C\" aria-label=\"기본형 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본형 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst count = ref(0);\nconst message = ref(&#39;&#39;);\nconst number = ref(3);\nconst isChecked = ref(false);\n\nconst increment = () =&gt; {\n  count.value++;\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  카운트 : {{ count }} &lt;br /&gt;\n  &lt;button @click=&quot;increment&quot;&gt;증가&lt;/button&gt; &lt;br /&gt;&lt;br /&gt;\n\n  입력한 메시지 :{{ message }} &lt;br /&gt;\n  &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;message&quot; placeholder=&quot;메세지를 입력바랍니다&quot; /&gt; &lt;br /&gt;\n  &lt;br /&gt;\n\n  입력한 숫자 : {{ number * 10 }} &lt;br /&gt;\n  &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;number&quot; placeholder=&quot;숫자를 입력하세요&quot; /&gt; &lt;br /&gt;\n  &lt;br /&gt;\n\n  체크 상태 : {{ isChecked }} &lt;br /&gt;\n\n  &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;isChecked&quot; /&gt; &lt;br /&gt;\n  &lt;br /&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"객체-예제\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%98%88%EC%A0%9C\" aria-label=\"객체 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { onMounted, ref } from &#39;vue&#39;;\n\n// 객체 선언\nconst user = ref(null);\n\n// 배열 선언\nconst languages = ref([&#39;C&#39;, &#39;Java&#39;, &#39;JavaScript&#39;]);\n\nonMounted(() =&gt; {\n  // axios로 데이터 받아오는 곳\n  setTimeout(() =&gt; {\n    user.value = { name: &#39;홍길동&#39;, age: &#39;25&#39;, favoriteLanguage: &#39;Java&#39; };\n  }, 3000);\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;template v-if=&quot;user&quot;&gt;\n    &lt;h3&gt;사용자 정보 입력&lt;/h3&gt;\n    이름 : &lt;input type=&quot;text&quot; v-model=&quot;user.name&quot; /&gt; &lt;br /&gt;\n    나이 : &lt;input type=&quot;number&quot; v-model=&quot;user.age&quot; /&gt; &lt;br /&gt;\n    좋아하는 언어 :\n    &lt;select v-model=&quot;user.favoriteLanguage&quot;&gt;\n      &lt;option v-for=&quot;item in languages&quot; :key=&quot;item&quot; :value=&quot;item&quot;&gt;{{ item }}&lt;/option&gt;\n    &lt;/select&gt;\n\n    &lt;h3&gt;입력한 정보&lt;/h3&gt;\n    이름 : {{ user.name }} &lt;br /&gt;\n    나이 : {{ user.age }} &lt;br /&gt;\n    좋아하는 언어 : {{ user.favoriteLanguage }} &lt;br /&gt;\n  &lt;/template&gt;\n  &lt;template v-else&gt;\n    &lt;h3&gt;로딩중...&lt;/h3&gt;\n  &lt;/template&gt;\n&lt;/template&gt;</code></pre></div>\n<ul>\n<li>onMounted에 의해 Dom이 마운트 된 후에 setTimeout이 동작된다.</li>\n<li>처음 렌더링 시에는 로딩중으로 나오게 된다.</li>\n<li>setTimeout 함수가 3초 지난후에는 user의 값이 바뀌어 재렌더링이 된다.</li>\n</ul>\n<h2 id=\"reactive\" style=\"position:relative;\"><a href=\"#reactive\" aria-label=\"reactive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reactive</h2>\n<ol>\n<li>reactive()는 객체(Object)와 배열(Array) 를 반응형 상태로 만드는 API이다.</li>\n<li>ref와 달리 Wrapping 하지 않고 반응형 프록시(proxy, 변경을 감지하는 JS 패턴)를 활용, .value를 사용하지 않고 속성에 직접 접근이 가능하다.</li>\n<li>ref()와 달리 기본 타입은 사용할 수 없고, 객체나 배열만 가능하며, null로 초기화 될 수 없다.</li>\n<li>Deep(깊은 복사) 동작함으로 ref에서 객체로 활용 할 때 이슈가 있으면 reactive를 활용 권장한다고 한다.</li>\n</ol>\n<h3 id=\"객체-예제-1\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%98%88%EC%A0%9C-1\" aria-label=\"객체 예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { onMounted, reactive, ref } from &#39;vue&#39;;\n\nconst isLoading = ref(true);\nconst user = reactive({ name: &#39;홍길동&#39;, age: 25, favoriteLanguage: &#39;JavaScript&#39; });\nconst languages = reactive([&#39;C&#39;, &#39;Java&#39;, &#39;JavaScript&#39;]);\n\nonMounted(() =&gt; {\n  setTimeout(() =&gt; {\n    const newUser = { name: &#39;홍길동&#39;, age: 25, favoriteLanguage: &#39;Java&#39; };\n\n    // 속성 직접 접근\n    user.name = newUser.name;\n    user.age = newUser.age;\n    user.favoriteLanguage = newUser.favoriteLanguage;\n    isLoading.value = false;\n  }, 3000);\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;h3&gt;사용자 정보 입력&lt;/h3&gt;\n  이름 : &lt;input v-model=&quot;user.name&quot; type=&quot;text&quot; /&gt; &lt;br /&gt;\n  나이 : &lt;input v-model=&quot;user.age&quot; type=&quot;number&quot; /&gt; &lt;br /&gt;\n  좋아하는 언어:\n  &lt;select v-model=&quot;user.favoriteLanguage&quot; class=&quot;input&quot;&gt;\n    &lt;option v-for=&quot;lang in languages&quot; :key=&quot;lang&quot; :value=&quot;lang&quot;&gt;\n      {{ lang }}\n    &lt;/option&gt;\n  &lt;/select&gt;\n  &lt;br /&gt;\n\n  &lt;h3&gt;입력한 정보&lt;/h3&gt;\n  이름: {{ user.name }}&lt;br /&gt;\n  나이: {{ user.age }}&lt;br /&gt;\n  좋아하는 언어: {{ user.favoriteLanguage }}&lt;br /&gt;\n&lt;/template&gt;</code></pre></div>\n<h2 id=\"computed----반응형-재계산\" style=\"position:relative;\"><a href=\"#computed----%EB%B0%98%EC%9D%91%ED%98%95-%EC%9E%AC%EA%B3%84%EC%82%B0\" aria-label=\"computed    반응형 재계산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>computed( ) - 반응형 재계산</h2>\n<ol>\n<li>computed()는 기존 데이터(state)를 기반으로 새로운 값을 자동 계산하는 API이다.</li>\n<li>종속된 값이 변경되면 자동으로 재계산 되며, 읽기 전용으로 활용한다. (기본적으로 읽기 전용이지만, set을 지원하기도 한다.)</li>\n<li>react의 useMemo와 유사한 방법으로 함수 내부의 값들이 변경되면 자동으로 계산되는 기능이라고 한다.</li>\n</ol>\n<h3 id=\"기본형-예제-1\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C-1\" aria-label=\"기본형 예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본형 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { computed, ref } from &#39;vue&#39;;\n\nconst price = ref(1000);\nconst quantity = ref(2);\n\n// 자동으로 계산되는 속성\nconst totalPrice = computed(() =&gt; price.value * quantity.value);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;h3&gt;물품 가격&lt;/h3&gt;\n  가격 : &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;price&quot; /&gt; 원 &lt;br /&gt;\n  수량 : &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;quantity&quot; /&gt; 개 &lt;br /&gt;\n  &lt;b&gt;총 가격 : {{ totalPrice }} 원&lt;/b&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"get--setter-예제\" style=\"position:relative;\"><a href=\"#get--setter-%EC%98%88%EC%A0%9C\" aria-label=\"get  setter 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>get / setter 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { computed, ref } from &#39;vue&#39;;\n\nconst firstName = ref(&#39;John&#39;);\nconst lastName = ref(&#39;Doe&#39;);\n\nconst fullName = computed({\n  // getter\n  get() {\n    return firstName.value + ` ` + lastName.value;\n  },\n\n  //setter\n  set(newValue) {\n    if (newValue.includes(&#39; &#39;)) {\n      [firstName.value, lastName.value] = newValue.split(&#39; &#39;);\n    }\n  },\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    firstName : &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;firstName&quot; /&gt; &lt;br /&gt;\n    lastName : &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;lastName&quot; /&gt; &lt;br /&gt;\n    fullName: &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;fullName&quot; /&gt; &lt;br /&gt;\n    fullName: {{ fullName }} &lt;br /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<ul>\n<li>\n<p>Getter\nfirstName과 lastName을 공백(” “)으로 연결하여 fullName을 반환한다. (예: “John Doe”)</p>\n</li>\n<li>\n<p>Setter\n새로운 fullName 값이 입력되었을 때, 공백이 포함된 경우 split(’ ‘)을 사용하여 firstName과 lastName을 각각 나눈다. (예: “John Doe” → firstName = “John”, lastName = “Doe”)</p>\n</li>\n</ul>\n<h2 id=\"watch---데이터-변경-감지\" style=\"position:relative;\"><a href=\"#watch---%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD-%EA%B0%90%EC%A7%80\" aria-label=\"watch   데이터 변경 감지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>watch() - 데이터 변경 감지</h2>\n<ol>\n<li>watch( )는 특정 데이터의 변화를 감지하는 API</li>\n<li>보통 변경을 감지하고 특정 로직 (예: API 호출, 상태 업데이트, 콘솔 로그, 알림 등) 을 실행한다.</li>\n<li>computed( )는 결과값을 반환하지만, watch()는 반응형 데이터를 변경했을 때 특정 동작을 실행 한다.</li>\n<li>ref 객체나 배열 조합시에는 반드시 { deep: true } 옵션이 필수다.</li>\n</ol>\n<h3 id=\"watch---기본형-예제데이터-1개-감시\" style=\"position:relative;\"><a href=\"#watch---%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C%EB%8D%B0%EC%9D%B4%ED%84%B0-1%EA%B0%9C-%EA%B0%90%EC%8B%9C\" aria-label=\"watch   기본형 예제데이터 1개 감시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>watch - 기본형 예제(데이터 1개 감시)</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref, watch } from &#39;vue&#39;;\n\nconst count = ref(0);\nconst logs = ref([]);\n\n// 기본\n// watch(count, () =&gt; {\n//   logs.value.push(count.value)\n// })\n\n// 신규값만 가져오는 방법\n// watch(count, (newValue) =&gt; {\n//   logs.value.push(newValue)\n// })\n\n// 3. new + old 값 가져오기 =&gt; 현재 값, 이전 값\nwatch(count, (newValue, oldValue) =&gt; {\n  console.log(`count 변경: ${oldValue} → ${newValue}`);\n  logs.value.push(`count 변경: ${oldValue} → ${newValue}`);\n});\n\nconst increment = () =&gt; {\n  count.value++;\n};\n\nconst decrement = () =&gt; {\n  count.value--;\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    count : {{ count }} &lt;br /&gt;\n    &lt;button @click=&quot;increment&quot;&gt;증가&lt;/button&gt;\n    &lt;button @click=&quot;decrement&quot;&gt;감소&lt;/button&gt;\n    &lt;div v-for=&quot;item in logs&quot; :key=&quot;item&quot;&gt;{{ item }}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"watch---기본형-예제데이터-2개-이상-감시\" style=\"position:relative;\"><a href=\"#watch---%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C%EB%8D%B0%EC%9D%B4%ED%84%B0-2%EA%B0%9C-%EC%9D%B4%EC%83%81-%EA%B0%90%EC%8B%9C\" aria-label=\"watch   기본형 예제데이터 2개 이상 감시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>watch - 기본형 예제(데이터 2개 이상 감시)</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref, watch } from &#39;vue&#39;;\n\nconst price = ref(1000);\nconst quantity = ref(2);\nconst totalPrice = ref(price.value * quantity.value);\nconst logs = ref([]);\n\n// 자동으로 계산되는 속성\n// const totalPrice = computed(() =&gt; price.value * quantity.value)\n\n// watch 처리\n// 1. 여러개 기본형\nwatch([price, quantity], () =&gt; {\n  totalPrice.value = price.value * quantity.value;\n  logs.value.push(`${price.value}, ${quantity.value}`);\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;h3&gt;물품 가격&lt;/h3&gt;\n  가격 : &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;price&quot; /&gt; 원 &lt;br /&gt;\n  수량 : &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;quantity&quot; /&gt; 개 &lt;br /&gt;\n\n  &lt;b&gt;총 가격 : {{ totalPrice }} 원&lt;/b&gt;\n\n  &lt;div v-for=&quot;item in logs&quot; :key=&quot;item&quot;&gt;{{ item }}&lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<ul>\n<li>price, quantity 둘 중에 하나의 값이라도 변경되면 해당 로직을 실행한다.</li>\n</ul>\n<h2 id=\"watcheffect---자동-감지-및-실행\" style=\"position:relative;\"><a href=\"#watcheffect---%EC%9E%90%EB%8F%99-%EA%B0%90%EC%A7%80-%EB%B0%8F-%EC%8B%A4%ED%96%89\" aria-label=\"watcheffect   자동 감지 및 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>watchEffect() - 자동 감지 및 실행</h2>\n<ol>\n<li>watchEffect()는 내부에서 사용된 모든 반응형 상태를 자동으로 감지하는 API이다.</li>\n<li>watch()와 달리 어떤 변수를 감시할지 명시할 필요 없으나 모든 변수의 변화를 감지하여 동작한다.</li>\n<li>이전 값에 대한 모니터링이 불가능하다</li>\n</ol>\n<h3 id=\"watcheffect---기본형-예제\" style=\"position:relative;\"><a href=\"#watcheffect---%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C\" aria-label=\"watcheffect   기본형 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>watchEffect - 기본형 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref, watch, watchEffect } from &#39;vue&#39;;\n\nconst count = ref(0);\nconst logs = ref([]);\n\nwatchEffect(() =&gt; {\n  logs.value.push(`count 변경 : ${count.value}`);\n});\n\nconst increment = () =&gt; {\n  count.value++;\n};\n\nconst decrement = () =&gt; {\n  count.value--;\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;p&gt;카운트: {{ count }}&lt;/p&gt;\n  &lt;button @click=&quot;increment&quot;&gt;증가&lt;/button&gt;\n  &lt;button @click=&quot;decrement&quot;&gt;감소&lt;/button&gt;\n  &lt;div v-for=&quot;item in logs&quot; v-bind:key=&quot;item&quot;&gt;\n    {{ item }}\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#ref\">ref</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C\">기본형 예제</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%98%88%EC%A0%9C\">객체 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reactive\">reactive</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%98%88%EC%A0%9C-1\">객체 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#computed----%EB%B0%98%EC%9D%91%ED%98%95-%EC%9E%AC%EA%B3%84%EC%82%B0\">computed( ) - 반응형 재계산</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C-1\">기본형 예제</a></li>\n<li><a href=\"#get--setter-%EC%98%88%EC%A0%9C\">get / setter 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#watch---%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD-%EA%B0%90%EC%A7%80\">watch() - 데이터 변경 감지</a></p>\n<ul>\n<li><a href=\"#watch---%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C%EB%8D%B0%EC%9D%B4%ED%84%B0-1%EA%B0%9C-%EA%B0%90%EC%8B%9C\">watch - 기본형 예제(데이터 1개 감시)</a></li>\n<li><a href=\"#watch---%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C%EB%8D%B0%EC%9D%B4%ED%84%B0-2%EA%B0%9C-%EC%9D%B4%EC%83%81-%EA%B0%90%EC%8B%9C\">watch - 기본형 예제(데이터 2개 이상 감시)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#watcheffect---%EC%9E%90%EB%8F%99-%EA%B0%90%EC%A7%80-%EB%B0%8F-%EC%8B%A4%ED%96%89\">watchEffect() - 자동 감지 및 실행</a></p>\n<ul>\n<li><a href=\"#watcheffect---%EA%B8%B0%EB%B3%B8%ED%98%95-%EC%98%88%EC%A0%9C\">watchEffect - 기본형 예제</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"반응형 API (Reactivity API) 반응형 API (Reactivity API)는 데이터의 변경을 자동으로 감지하고, UI를 최신 상태로 유지하는 API이다. 기본적으로 Vue는 데이터가 변경되면 자동으로 DOM을 업데이트하는데, 이를 가능하게 하는 핵심\n개념이 반응형 시스템(Reactivity System)이다. React의 Hooks와 유사한 개념으로 useState를 ref, reactive로 useEffect는 watch와 watchEffect가 대응 ref ref()는 기본 데이터 타입(Number, String, Boolean, Object, Array 등)을 반응형으로 만드는 API 이다. 기본형을 감싸서(Wrapping)하여 관리함에 따라 .value 속성을 통해 값을 읽고 수정이 가능하다. 객체를 ref로 감싸면 내부적으로 reactive()와 유사하게 동작하며, reactive 다르게 ref로는 null로 초기화\n가능하고 객체로 할당하는 경우 reacti…","frontmatter":{"date":"February 13, 2025","title":"Day 54 Vue 반응형 API","categories":"프로그래머스","author":"중석","emoji":"👨🏻‍💻"},"fields":{"slug":"/Programmers/Day54/"}},"next":{"id":"993daec3-bda8-5e78-ad5f-5be0bae6d350","html":"<h1 id=\"vue-template-syntax---보간법-디렉티브\" style=\"position:relative;\"><a href=\"#vue-template-syntax---%EB%B3%B4%EA%B0%84%EB%B2%95-%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C\" aria-label=\"vue template syntax   보간법 디렉티브 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue Template Syntax - 보간법, 디렉티브</h1>\n<ol>\n<li>Vue는 렌더링된 DOM과 바인딩할 수 있는 HTML 친화적인 템플릿 구문을 사용</li>\n<li>HTML 처럼 보이지만 내부적으로는 Javascript 파싱되어 순수 js 객체로 관리 된다.</li>\n<li>작성된 템플릿 구문은 Vue app을 통해 이벤트 및 반응성 처리를 지원</li>\n<li>또한 DOM의 변경을 최소한으로 수행하기 위해 Virtual DOM으로 구성됨</li>\n</ol>\n<p>참고 : <a href=\"https://ko.vuejs.org/guide/essentials/template-syntax\">https://ko.vuejs.org/guide/essentials/template-syntax</a></p>\n<h2 id=\"보간법-text-interpolation\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EA%B0%84%EB%B2%95-text-interpolation\" aria-label=\"보간법 text interpolation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보간법 (Text Interpolation)</h2>\n<ol>\n<li>Text Interpolation(보간법)</li>\n</ol>\n<ul>\n<li>콧수엽(Mustache)문법을 통해 반응형으로 vue에 선언된 data를 출력한다.</li>\n<li>출력된 값은 escape 처리 되어 XSS에 안전하게 어플리케이션을 보호한다.</li>\n</ul>\n<ol start=\"2\">\n<li>JavaScript Expressions</li>\n</ol>\n<ul>\n<li>JS 문법을 표현식으로 처리할수 있다.</li>\n<li>document.write(‘this!’) this에 들어갈수 있는 문법만 적용 가능</li>\n<li>순수 문자열, 삼항연산자, 초기화 구문, 함수 등이 사용 될 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst number = ref(5);\nconst message = ref(&#39;Hello vue world!&#39;);\nconst id = ref(&#39;test&#39;);\nconst myFunc = ref(() =&gt; &#39;myFunc Test!&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    {{ number + 5 }} &lt;br /&gt;\n    {{ null ? &#39;null 입니다&#39; : &#39;null이 아닙니다&#39; }} &lt;br /&gt;\n    {{ null || &#39;초기화 문장입니다&#39; }} &lt;br /&gt;\n    {{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}&lt;br /&gt;\n    &lt;div :id=&quot;`list-${id}`&quot;&gt;&lt;/div&gt;\n    {{ myFunc() }}\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h2 id=\"디렉티브directives\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8Cdirectives\" aria-label=\"디렉티브directives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉티브(Directives)</h2>\n<ol>\n<li>HTML 요소에 특수한 동작을 추가하는 템플릿 전용 속성(Attribute)이다.</li>\n<li>v- 접두사를 사용하며, Vue의 반응형 시스템과 결합하여 동적인 동작을 수행할 수 있다.</li>\n<li>주로 속성 바인딩, 양방향 바인딩 또는 분기문, 반복문 등을 표현할 때 활용 된다.</li>\n</ol>\n<h3 id=\"v-bind-attribute-bindings\" style=\"position:relative;\"><a href=\"#v-bind-attribute-bindings\" aria-label=\"v bind attribute bindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>v-bind (Attribute Bindings)</h3>\n<ol>\n<li>vue에서 속성 값을 바인딩 하기 위해 활용되는 문법</li>\n<li>모든 속성값(id, class, type, value …)이 바인딩 될수 있음</li>\n<li>v-bind:value=”~~~“와 같이 속성값 앞에 문법을 활용</li>\n<li>Shorthand 문법지원</li>\n</ol>\n<ul>\n<li>bind 생략 후 ’:‘만 사용</li>\n<li>속성값과 같은 이름 생략하여 ‘:width’만 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\nconst message = ref(&#39;v-bind 디렉티브&#39;);\nconst imagePath = ref(\n  &#39;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&#39;,\n);\nconst url = ref(&#39;https://www.google.com/images/branding/googlelogo/1x/&#39;);\nconst filename = ref(&#39;googlelogo_color_272x92dp.png&#39;);\nconst width = ref(&#39;200px&#39;);\nconst isButtonDisabled = ref(true);\nconst objectOfAttrs = ref({\n  id: &#39;container&#39;,\n  class: &#39;wrapper&#39;,\n  style: &#39;background-color:green&#39;,\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input type=&quot;text&quot; v-bind:value=&quot;message&quot; /&gt;\n\n  &lt;!-- Shorthand 문법, &#39;:&#39;만 활용, :width, 속성이름과 같은면 대체 --&gt;\n  &lt;input type=&quot;text&quot; :value=&quot;message&quot; /&gt;\n  &lt;img :src=&quot;imagePath&quot; /&gt;\n  &lt;img :src=&quot;imagePath&quot; :width=&quot;width&quot; /&gt;\n\n  &lt;!-- width는 이름이 같아서 생략 가능--&gt;\n  &lt;img :src=&quot;imagePath&quot; :width /&gt;\n\n  &lt;!-- v-bind 내에서 문자열을 조합하는 방법 --&gt;\n  &lt;img :src=&quot;url + filename&quot; :width /&gt;\n  &lt;img :src=&quot;`${url}${filename}`&quot; :width /&gt;\n\n  &lt;!-- boolean 적용 방법 --&gt;\n  &lt;button :disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;\n\n  &lt;!--objectOfAttrs에 다수의 속성값을 한번에 적용하는 문법--&gt;\n  &lt;div v-bind=&quot;objectOfAttrs&quot;&gt;복합속성 적용&lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"v-model-component-two-way-binding\" style=\"position:relative;\"><a href=\"#v-model-component-two-way-binding\" aria-label=\"v model component two way binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>v-model (component two-way binding)</h3>\n<ol>\n<li>사용자 입력을 받는 폼(form) 엘리먼트 또는 컴포넌트에 양방향 바인딩을 만드는 디렉티브</li>\n<li>이벤트를 통해 변경된 값을 감지하여 vue(VDOM) 내부 변수와 양방향 바인딩</li>\n<li>input, select, textarea 그리고 사용자 컴포넌트에서만 활용 가능하다.</li>\n</ol>\n<p>참고 : <a href=\"https://ko.vuejs.org/guide/essentials/forms.html\">https://ko.vuejs.org/guide/essentials/forms.html</a></p>\n<h4 id=\"checkbox\" style=\"position:relative;\"><a href=\"#checkbox\" aria-label=\"checkbox permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>checkBox</h4>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst hobby = ref([&#39;A&#39;, &#39;B&#39;]);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input type=&quot;checkbox&quot; id=&quot;hobbyA&quot; value=&quot;A&quot; v-model=&quot;hobby&quot; /&gt;\n  &lt;label for=&quot;hobbyA&quot;&gt;운동&lt;/label&gt;\n\n  &lt;input type=&quot;checkbox&quot; id=&quot;hobbyB&quot; value=&quot;B&quot; v-model=&quot;hobby&quot; /&gt;\n  &lt;label for=&quot;hobbyB&quot;&gt;독서&lt;/label&gt;\n\n  &lt;input type=&quot;checkbox&quot; id=&quot;hobbyC&quot; value=&quot;C&quot; v-model=&quot;hobby&quot; /&gt;\n  &lt;label for=&quot;hobbyC&quot;&gt;영화보기&lt;/label&gt;\n\n  선택된 취미 : {{ hobby.sort() }}\n&lt;/template&gt;</code></pre></div>\n<h4 id=\"select\" style=\"position:relative;\"><a href=\"#select\" aria-label=\"select permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>select</h4>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst category = ref(&#39;&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;select v-model=&quot;category&quot;&gt;\n    &lt;option value=&quot;&quot;&gt;-- 상품 분류 선택 --&lt;/option&gt;\n    &lt;option value=&quot;C01&quot;&gt;레저&lt;/option&gt;\n    &lt;option value=&quot;C02&quot;&gt;가전&lt;/option&gt;\n    &lt;option value=&quot;C03&quot;&gt;음식&lt;/option&gt;\n    &lt;option value=&quot;C04&quot;&gt;도서&lt;/option&gt;\n  &lt;/select&gt;\n  선택된 상품 분류 : {{ category }} &lt;br /&gt;\n&lt;/template&gt;</code></pre></div>\n<h4 id=\"true-value-false-value-속성\" style=\"position:relative;\"><a href=\"#true-value-false-value-%EC%86%8D%EC%84%B1\" aria-label=\"true value false value 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>true-value, false-value 속성</h4>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst agree = ref(&#39;no&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  위의 내용에 동의하십니까?\n  &lt;input type=&quot;checkbox&quot; v-model=&quot;agree&quot; true-value=&quot;yes&quot; false-value=&quot;no&quot; /&gt;\n&lt;/template&gt;</code></pre></div>\n<ul>\n<li>체크박스를 클릭하면 agree의 값이 바뀜</li>\n</ul>\n<h4 id=\"modifiers\" style=\"position:relative;\"><a href=\"#modifiers\" aria-label=\"modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modifiers</h4>\n<ol>\n<li>event가 감지된 이후 적용할 값에 대한 후처리 기능도 지원</li>\n<li>number: 입력시 number타입으로 자동형변환</li>\n<li>trim: 문자열의 앞뒤 문자열 제거</li>\n<li>lazy: 포커스가 이동하는 이벤트 발생시 데이터 동기화</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst agree = ref(&#39;no&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  //숫자 변환\n  &lt;input type=&quot;text&quot; v-model.number=&quot;num&quot; /&gt;\n  number : {{ num * 10 }}\n\n  // 자동 trim 변환\n  &lt;input type=&quot;text&quot; v-model.trim=&quot;trimStr&quot; /&gt;\n  trimStr : {{ trimStr }}\n\n  // lazy 연동(포커스 벗어나면 업데이트)\n  &lt;input type=&quot;text&quot; v-model.lazy=&quot;msg&quot; /&gt;\n  msg : {{ msg }}\n&lt;/template&gt;</code></pre></div>\n<h2 id=\"conditional-rendering\" style=\"position:relative;\"><a href=\"#conditional-rendering\" aria-label=\"conditional rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Rendering</h2>\n<ol>\n<li>제어문의 조건문으로 조건이 일치할 경우 동작</li>\n<li>v-if는 값이 없을때 보이지 않도록 하는 필터링 문으로도 많이 활용</li>\n</ol>\n<p>참고 : <a href=\"https://ko.vuejs.org/guide/essentials/conditional.html\">https://ko.vuejs.org/guide/essentials/conditional.html</a></p>\n<h3 id=\"조건문---if-else-if-else\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8---if-else-if-else\" aria-label=\"조건문   if else if else permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문 - if, else-if, else</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst text = ref(&#39;Hello vue world!&#39;);\nconst nullValue = ref(null);\nconst balance = ref(0);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;!-- 텍스트가 있으면 출력하거나 없으면 출력하지 않는 문장 --&gt;\n  text : &lt;span v-if=&quot;text&quot;&gt;{{ text }}&lt;/span&gt;\n\n  nullValue: &lt;span v-if=&quot;nullValue&quot;&gt;{{ nullValue }}&lt;/span&gt;\n\n  잔고: &lt;input type=&quot;text&quot; v-model=&quot;balance&quot; /&gt;\n\n  회원님의 등급 :\n  &lt;span v-if=&quot;balance &gt;= 1000000&quot;&gt;Gold&lt;/span&gt;\n  &lt;span v-else-if=&quot;balance &gt;= 500000&quot;&gt;Silver&lt;/span&gt;\n  &lt;span v-else-if=&quot;balance &gt;= 200000&quot;&gt;Bronze&lt;/span&gt;\n  &lt;span v-else&gt;Iron&lt;/span&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"v-for-list-rendering\" style=\"position:relative;\"><a href=\"#v-for-list-rendering\" aria-label=\"v for list rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>v-for (list Rendering)</h3>\n<ol>\n<li>엘리먼트 또는 템플릿 블록을 반복하여 렌더링 할 때 list로 표현하는 디렉티브</li>\n<li>또한 반드시 key를 적용 해야 하며, 이는 렌더링 시 최적화를 위해 활용된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst names = ref([&#39;홍길동&#39;, &#39;김길동&#39;, &#39;박길동&#39;]);\n\nconst regions = ref({\n  A: &#39;Asia&#39;,\n  B: &#39;America&#39;,\n  C: &#39;Europe&#39;,\n  D: &#39;Africa&#39;,\n  E: &#39;Oceania&#39;,\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;span v-for=&quot;(item, index) in names&quot; :key=&quot;index&quot;&gt;{{ `${index} ${item}` }}, &lt;/span&gt;\n\n  &lt;!-- 객체 반복하는 방법 --&gt;\n  &lt;ul&gt;\n    &lt;li v-for=&quot;(item, key, index) in regions&quot; :key=&quot;index&quot;&gt;{{ `${key}: ${item}` }}&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;</code></pre></div>\n<h2 id=\"v-on-이벤트-연결\" style=\"position:relative;\"><a href=\"#v-on-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%97%B0%EA%B2%B0\" aria-label=\"v on 이벤트 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>v-on (이벤트 연결)</h2>\n<ol>\n<li>이벤트 리스너를 특정 메소드로 바인딩하거나 익명함수를 통해 즉시 구현 가능 디렉티브</li>\n<li>@ 단축 문법 사용 가능하여 @을 통해 축약하는 것이 일반적</li>\n</ol>\n<p>참고 : <a href=\"https://ko.vuejs.org/api/built-in-directives#v-on\">https://ko.vuejs.org/api/built-in-directives#v-on</a></p>\n<h3 id=\"vue-이벤트-핸들링\" style=\"position:relative;\"><a href=\"#vue-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81\" aria-label=\"vue 이벤트 핸들링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue 이벤트 핸들링</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n// 이벤트 핸들러 함수\nconst doThis = () =&gt; {\n  alert(&#39;doThis 실행! &#39;);\n};\nconst doThat = (message, event) =&gt; {\n  alert(`doThat 실행! 메시지: ${message}, 이벤트 타입: ${event.type}`);\n};\nconst onEnter = () =&gt; {\n  alert(&#39;Enter 키가 눌렸습니다!&#39;);\n};\nconst count = ref(0);\n\nconst increment = () =&gt; {\n  count.value++;\n};\n// 동적 이벤트 이름\nconst event = ref(&#39;click&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;!-- @으로 사용하는 것이 정석 --&gt;\n  &lt;button @click=&quot;doThis&quot;&gt;매서드 핸들러 실행&lt;/button&gt;\n\n  &lt;!-- 동적 이벤트 --&gt;\n  &lt;button v-on:[event]=&quot;doThis&quot;&gt;동적 이벤트&lt;/button&gt;\n\n  &lt;!-- 인라인 표현식 --&gt;\n  &lt;button @click=&quot;doThat(`hello`, $event)&quot;&gt;인라인 표현식&lt;/button&gt;\n\n  &lt;!-- 단축 문법 --&gt;\n  &lt;button @click=&quot;doThis&quot;&gt;단축 문법&lt;/button&gt;\n\n  &lt;!-- 단축 문법 동적 이벤트 --&gt;\n  &lt;button @[event]=&quot;doThis&quot;&gt;단축 문법 동적 이벤트&lt;/button&gt;\n\n  &lt;!-- 전파 중지 --&gt;\n  &lt;button @click.stop=&quot;doThis&quot;&gt;전파 중지&lt;/button&gt;\n\n  &lt;!-- 키 별칭을 수식어로 사용 --&gt;\n  &lt;input type=&quot;text&quot; @keyup.enter=&quot;onEnter&quot; placeholder=&quot;Enter를 눌러보세요!&quot; name=&quot;&quot; id=&quot;&quot; /&gt;\n\n  &lt;!-- 클릭 이벤트 단 한 번만 트리거 --&gt;\n  &lt;button @click.once=&quot;doThis&quot;&gt;클릭 이벤트 한번만 실행&lt;/button&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"이벤트-처리-방식\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EC%8B%9D\" aria-label=\"이벤트 처리 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 처리 방식</h3>\n<ol>\n<li>인라인 처리, 함수 분리, 인라인 함수 처리로 처리 가능</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst count = ref(0);\n\nconst increment = () =&gt; {\n  count.value++;\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;!-- 인라인 처리 --&gt;\n  &lt;button @click=&quot;count++&quot;&gt;count: {{ count }}&lt;/button&gt;\n\n  &lt;!-- 함수 분리 --&gt;\n  &lt;button @click=&quot;increment&quot;&gt;count : {{ count }}&lt;/button&gt;\n\n  &lt;!-- 인라인 함수 처리 --&gt;\n  &lt;button @click=&quot;(e) =&gt; count++&quot;&gt;count: {{ count }}&lt;/button&gt;\n&lt;/template&gt;</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B3%B4%EA%B0%84%EB%B2%95-text-interpolation\">보간법 (Text Interpolation)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8Cdirectives\">디렉티브(Directives)</a></p>\n<ul>\n<li>\n<p><a href=\"#v-bind-attribute-bindings\">v-bind (Attribute Bindings)</a></p>\n</li>\n<li>\n<p><a href=\"#v-model-component-two-way-binding\">v-model (component two-way binding)</a></p>\n<ul>\n<li><a href=\"#checkbox\">checkBox</a></li>\n<li><a href=\"#select\">select</a></li>\n<li><a href=\"#true-value-false-value-%EC%86%8D%EC%84%B1\">true-value, false-value 속성</a></li>\n<li><a href=\"#modifiers\">Modifiers</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#conditional-rendering\">Conditional Rendering</a></p>\n<ul>\n<li><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8---if-else-if-else\">조건문 - if, else-if, else</a></li>\n<li><a href=\"#v-for-list-rendering\">v-for (list Rendering)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#v-on-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%97%B0%EA%B2%B0\">v-on (이벤트 연결)</a></p>\n<ul>\n<li><a href=\"#vue-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81\">Vue 이벤트 핸들링</a></li>\n<li><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EC%8B%9D\">이벤트 처리 방식</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 12, 2025","title":"Day 53 Vue Template Syntax - 보간법, 디렉티브","categories":"프로그래머스","author":"중석","emoji":"👨🏻‍💻"},"fields":{"slug":"/Programmers/Day53(2)/"}},"prev":{"id":"4211917f-af8a-5f1a-b996-076a663f271e","html":"<h1 id=\"컴포넌트-연동\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%97%B0%EB%8F%99\" aria-label=\"컴포넌트 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 연동</h1>\n<p>Vue 컴포넌트 연동에 핵심이 되는 3가지 개념은 props, emit 그리고 v-model이 있다.</p>\n<ul>\n<li>props : 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 Read-Only 속성, defineProps() 사용</li>\n<li>emit : 자식 컴포넌트에서 부모 컴포넌트로 이벤트를 전달하는 방법, defineEmits(), $emit() 사용</li>\n<li>v-model : 부모와 자식 간의 양방향 바인딩으로 props + emit을 합친 개념, defineModel() 사용</li>\n</ul>\n<h2 id=\"props\" style=\"position:relative;\"><a href=\"#props\" aria-label=\"props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>props</h2>\n<ul>\n<li>Props는 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 방법</li>\n<li>defineProps를 통해 자식 컴포넌트에서 부모에서 받을 props를 정의</li>\n<li>html 속성 처럼 camelCase가 아닌 kebab-case로 이름을 정의하는 것을 권장 (greeting-message=“안녕!“)</li>\n<li>단방향 데이터 흐름을 유지해야 하며, props로 받은 값은 자식에서 직접 수정할 수 없다. (read only)</li>\n<li>단방향 데이터 흐름일지라도 부모에서 props를 변경하면 이를 감지하여 자동으로 업데이트 된다.</li>\n</ul>\n<h3 id=\"예제-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-1\" aria-label=\"예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트\n&lt;script setup&gt;\nimport ChildComponent1 from &#39;./ChildComponent1.vue&#39;;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h3&gt;Parent Component1&lt;/h3&gt;\n    &lt;ChildComponent1 title=&quot;Vue의 Props&quot; :count=&quot;10&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트\n&lt;script setup&gt;\n// props 선언부\n\n// props를 js에서 활용할 일이 있으면 props를 선언하여 받는다.\nconst props = defineProps({\n  title: String,\n  count: Number,\n});\n\nconsole.log(props.count);\nconsole.log(props.title);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;b&gt;{{ title }}&lt;/b\n    &gt;&lt;br /&gt;\n    Count: {{ count }}&lt;br /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"예제-2\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-2\" aria-label=\"예제 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트 (Parent Component2)\n\n&lt;script setup&gt;\nimport ChildComponent2 from &#39;./ChildComponent2.vue&#39;;\n\nconst title = &#39;Vue Props 예제입니다.&#39;;\nconst count = 10;\nconst active = true;\nconst items = [&#39;Apple&#39;, &#39;Banana&#39;, &#39;Cherry&#39;];\nconst user = { name: &#39;Alice&#39;, age: 25 };\nconst today = new Date();\nconst callback = () =&gt; alert(&#39;Callback function!&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;ChildComponent2\n    :title=&quot;title&quot;\n    :count=&quot;count&quot;\n    :active=&quot;active&quot;\n    :items=&quot;items&quot;\n    :user=&quot;user&quot;\n    :today=&quot;today&quot;\n    :callback=&quot;callback&quot;\n  /&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트 (ChildComponent2)\n&lt;script setup&gt;\ndefineProps({\n  title: String, // 문자열\n  count: Number, // 숫자\n  active: Boolean, // 불리언\n  items: Array, // 배열\n  user: Object, // 객체\n  callback: Function, // 함수\n  today: Date,\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;h3&gt;{{ title }}&lt;/h3&gt;\n    count : {{ count }} &lt;br /&gt;\n    active : {{ active ? &#39;Y&#39; : &#39;N&#39; }} &lt;br /&gt;\n    item : &lt;template v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&gt;{{ item }},&lt;/template&gt; &lt;br /&gt;\n    user : {{ user.name }}, {{ user.age }}&lt;br /&gt;\n    today : {{ today.toLocaleString() }}&lt;br /&gt;\n    &lt;button @click=&quot;callback&quot;&gt;callback&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"유효성-검사\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\" aria-label=\"유효성 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유효성 검사</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트 (Parent Component3)\n&lt;script setup&gt;\nimport ChildComponent3 from &#39;./ChildComponent3.vue&#39;;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;ChildComponent3\n    :prop-a=&quot;10&quot;\n    prop-b=&quot;Hello World&quot;\n    prop-c=&quot;required&quot;\n    :prop-d=&quot;null&quot;\n    prop-g=&quot;성공&quot;\n  /&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트 (ChildComponent3)\n&lt;script setup&gt;\ndefineProps({\n  // 기본 타입 검사 (null, undefined 허용)\n  propA: Number,\n  // 여러 가지 가능한 타입\n  propB: [String, Number],\n  // 필수 문자열\n  propC: {\n    type: String,\n    required: true,\n  },\n  // 필수이지만 널 허용 문자열\n  propD: {\n    type: [String, null],\n    required: true,\n  },\n  // 기본값이 있는 숫자\n  propE: {\n    type: Number,\n    default: 100,\n  },\n  propG: {\n    validator(value) {\n      // 값은 이 문자열 중 하나와 일치해야 합니다\n      return [&#39;성공&#39;, &#39;경고&#39;, &#39;위험&#39;].includes(value);\n    },\n  },\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;h2&gt;Child Component&lt;/h2&gt;\n    propA (Number): {{ propA }} &lt;br /&gt;\n    propB (String or Number): {{ propB }} &lt;br /&gt;\n    propC (Required String): {{ propC }} &lt;br /&gt;\n    propD (Required String or Null): {{ propD }} &lt;br /&gt;\n    propE (Number with Default 100): {{ propE }} &lt;br /&gt;\n    propG (&#39;성공&#39;, &#39;경고&#39;, &#39;위험&#39;): {{ propG }} &lt;br /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h2 id=\"emit\" style=\"position:relative;\"><a href=\"#emit\" aria-label=\"emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>emit</h2>\n<ul>\n<li>Vue의 emit은 자식 컴포넌트에서 부모 컴포넌트로 이벤트를 전달하는 메커니즘이다.</li>\n<li>Vue3에서 도입된 $emit을 기반으로 활용하는 문법으로 단축된 emit 활용을 지원한다.</li>\n<li>부모에서는 @some-event와 같이 kebab-case로 선언하고, 자식에는 camelCase로 호출하여도 문제없다.</li>\n<li>또한 vue2 부터 활용하던 emit 패턴으로 defineEmits을 통해 emit을 활용하는 방법도 존재</li>\n</ul>\n<h3 id=\"emit-기본-예제\" style=\"position:relative;\"><a href=\"#emit-%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%A0%9C\" aria-label=\"emit 기본 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>emit 기본 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트\n&lt;script setup&gt;\nimport EmitBasic1 from &#39;./EmitBasic1.vue&#39;;\n\nconst handleSomeEvent = () =&gt; {\n  alert(&#39;call handleSomeEvent&#39;);\n  console.log(&#39;call handleSomeEvent&#39;);\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;EmitBasic1 @some-event=&quot;handleSomeEvent&quot; /&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트\n\n&lt;script setup&gt;&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;h3&gt;Child&lt;/h3&gt;\n    &lt;!-- someEvent : 부모에서 정의 이벤트의 이름 --&gt;\n    &lt;button @click=&quot;$emit(&#39;someEvent&#39;)&quot;&gt;Click me&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"데이터-전달-예제---emit\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EC%98%88%EC%A0%9C---emit\" aria-label=\"데이터 전달 예제   emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 전달 예제 - emit</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트\n&lt;script setup&gt;\nimport EmitData1 from &#39;./EmitData1.vue&#39;;\n\nconst handleSomeEvent = (count, text) =&gt; {\n  alert(`전달 된 데이터 : ${count}, ${text}`);\n  console.log(`전달 된 데이터 : ${count}, ${text}`);\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;EmitData1 @some-event=&quot;handleSomeEvent&quot; /&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트\n&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\n\nconst count = ref(100);\nconst text = ref(&#39;안녕하세요?&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;h3&gt;Child&lt;/h3&gt;\n    count : &lt;input type=&quot;text&quot; v-model=&quot;count&quot; /&gt; &lt;br /&gt;\n    text : &lt;input type=&quot;text&quot; v-model=&quot;text&quot; /&gt; &lt;br /&gt;\n\n    &lt;button @click=&quot;$emit(&#39;someEvent&#39;, count, text)&quot;&gt;emit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h3 id=\"데이터-전달-예제---defineemits\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EC%98%88%EC%A0%9C---defineemits\" aria-label=\"데이터 전달 예제   defineemits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 전달 예제 - defineEmits</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트\n\n&lt;script setup&gt;\nimport EmitBasic2 from &#39;./EmitBasic2.vue&#39;;\n\nconst handleSomeEvent = () =&gt; {\n  alert(&#39;call handleSomeEvent&#39;);\n  console.log(&#39;call handleSomeEvent&#39;);\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;EmitBasic2 @some-event=&quot;handleSomeEvent&quot; /&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트\n&lt;script setup&gt;\nimport { defineEmits } from &#39;vue&#39;;\n\n// 이벤트 정의\nconst emit = defineEmits([&#39;someEvent&#39;]);\n\nconst handleClick = () =&gt; {\n  emit(&#39;someEvent&#39;);\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;h3&gt;Child&lt;/h3&gt;\n    &lt;button @click=&quot;handleClick&quot;&gt;Click me&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h2 id=\"v-model---definemodel\" style=\"position:relative;\"><a href=\"#v-model---definemodel\" aria-label=\"v model   definemodel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>v-model - defineModel()</h2>\n<ul>\n<li>v-model을 컴포넌트에서 사용하여 양방향 바인딩을 구현할 수 있다.</li>\n<li>또한 named를 붙여 하나가 아닌 여러 개의 v-model을 활용할 수 있다.</li>\n<li>Vue 3.4부터는 defineModel() 매크로를 사용하는 것을 권장한다.</li>\n</ul>\n<h3 id=\"다수의-v-model-활용\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%88%98%EC%9D%98-v-model-%ED%99%9C%EC%9A%A9\" aria-label=\"다수의 v model 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다수의 v-model 활용</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트\n&lt;script setup&gt;\nimport { ref } from &#39;vue&#39;;\nimport ChildComponent2 from &#39;./ChildComponent2.vue&#39;;\n\nconst count = ref(0);\nconst text = ref(&#39;&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    count : {{ count }} &lt;br /&gt;\n    text : {{ text }} &lt;br /&gt;\n    &lt;ChildComponent2 v-model:count=&quot;count&quot; v-model:text=&quot;text&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트 (ChildComponent2)\n\n&lt;script setup&gt;\nconst count = defineModel(&#39;count&#39;);\nconst text = defineModel(&#39;text&#39;);\n\nconst increment = () =&gt; {\n  count.value++;\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    부모 count : {{ count }} &lt;button @click=&quot;increment&quot;&gt;click&lt;/button&gt;&lt;br /&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;text&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<h2 id=\"provide--inject-전역-속성-공유\" style=\"position:relative;\"><a href=\"#provide--inject-%EC%A0%84%EC%97%AD-%EC%86%8D%EC%84%B1-%EA%B3%B5%EC%9C%A0\" aria-label=\"provide  inject 전역 속성 공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provide / Inject (전역 속성 공유)</h2>\n<ul>\n<li>vue에서 props 없이 컴포넌트 간 데이터를 공유하는 방법 제공한다.</li>\n<li>provide()를 사용하여 부모가 값을 제공하고, inject()를 사용하여 자식이 값을 사용한다.</li>\n<li>provide(): 부모 컴포넌트에서 데이터를 제공 하는 메소드</li>\n</ul>\n<h3 id=\"반응형-예제\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-%EC%98%88%EC%A0%9C\" aria-label=\"반응형 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반응형 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">// 부모 컴포넌트\n&lt;script setup&gt;\nimport { provide, ref } from &#39;vue&#39;;\nimport ChildComponent2A from &#39;./ChildComponent2A.vue&#39;;\nimport ChildComponent2B from &#39;./ChildComponent2B.vue&#39;;\n\nconst location = ref(&#39;북극&#39;);\n\nconst updateLocation = (newLocation) =&gt; {\n  location.value = newLocation;\n};\n\n// provide를 통해 자식 컴포넌트에 값과 update 함수 제공\nprovide(&#39;location&#39;, { location, updateLocation });\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h3&gt;부모 컴포넌트&lt;/h3&gt;\n    현재 위치 : {{ location }} &lt;br /&gt;\n    &lt;ChildComponent2A /&gt;\n    &lt;ChildComponent2B /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트 (ChildComponent2A)\n&lt;script setup&gt;\nimport { inject } from &#39;vue&#39;;\n\n// 부모에서 전달한 location과 update함수 선언\nconst { location, updateLocation } = inject(&#39;location&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;h3&gt;자식 컴포넌트 2A&lt;/h3&gt;\n    현재 위치 : {{ location }} &lt;br /&gt;\n    &lt;button @click=&quot;updateLocation(&#39;남극&#39;)&quot;&gt;남극 변경&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n// 자식 컴포넌트 (ChildComponent2B)\n\n&lt;script setup&gt;\nimport { inject } from &#39;vue&#39;;\n\n// 부모에서 전달한 location과 update함수 선언\nconst { location, updateLocation } = inject(&#39;location&#39;);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    &lt;h3&gt;자식 컴포넌트 2B&lt;/h3&gt;\n    현재 위치 : {{ location }} &lt;br /&gt;\n    &lt;button @click=&quot;updateLocation(&#39;북극&#39;)&quot;&gt;북극 변경&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#props\">props</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%A0%9C-1\">예제 1</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C-2\">예제 2</a></li>\n<li><a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\">유효성 검사</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#emit\">emit</a></p>\n<ul>\n<li><a href=\"#emit-%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%A0%9C\">emit 기본 예제</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EC%98%88%EC%A0%9C---emit\">데이터 전달 예제 - emit</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EC%98%88%EC%A0%9C---defineemits\">데이터 전달 예제 - defineEmits</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#v-model---definemodel\">v-model - defineModel()</a></p>\n<ul>\n<li><a href=\"#%EB%8B%A4%EC%88%98%EC%9D%98-v-model-%ED%99%9C%EC%9A%A9\">다수의 v-model 활용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#provide--inject-%EC%A0%84%EC%97%AD-%EC%86%8D%EC%84%B1-%EA%B3%B5%EC%9C%A0\">Provide / Inject (전역 속성 공유)</a></p>\n<ul>\n<li><a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-%EC%98%88%EC%A0%9C\">반응형 예제</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 14, 2025","title":"Day 55 Vue 컴포넌트 연동","categories":"프로그래머스","author":"중석","emoji":"👨🏻‍💻"},"fields":{"slug":"/Programmers/Day55/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/dony0720","comments":{"utterances":{"repo":"dony0720/dony0720.github.io"}}}}},"pageContext":{"slug":"/Programmers/Day54/","nextSlug":"/Programmers/Day53(2)/","prevSlug":"/Programmers/Day55/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}