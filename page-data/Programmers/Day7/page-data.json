{"componentChunkName":"component---src-templates-blog-template-js","path":"/Programmers/Day7/","result":{"data":{"cur":{"id":"037f927d-67aa-5ade-b2d4-0d08aa21f2dc","html":"<h1 id=\"css-미디어-쿼리\" style=\"position:relative;\"><a href=\"#css-%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC\" aria-label=\"css 미디어 쿼리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 미디어 쿼리</h1>\n<ul>\n<li>웹 페이지를 다양한 기기와 화면 크기에서 최적화하기 위해 CSS 스타일을 조건부로 적용하는 기능이다</li>\n<li>반응형 웹 디자인(Responsive Web Design)의 핵심 도구로, 화면 크기, 해상도, 색상 모드 등 다양한 기기 특성에 따라 스타일을 변경할 수 있다</li>\n</ul>\n<h2 id=\"기본-문법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\" aria-label=\"기본 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 문법</h2>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span>조건<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 조건에 해당할 때 적용될 스타일 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>조건 부분이 만족될때 해당 스타일이 적용된다</li>\n</ul>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>화면 너비가 768px 이하일 경우에 font-size 14px이 적용된다</li>\n</ul>\n<h2 id=\"미디어-쿼리-조건\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC-%EC%A1%B0%EA%B1%B4\" aria-label=\"미디어 쿼리 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미디어 쿼리 조건</h2>\n<h3 id=\"max-width--min-width\" style=\"position:relative;\"><a href=\"#max-width--min-width\" aria-label=\"max width  min width permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>max-width / min-width</h3>\n<ul>\n<li>max-width: 화면 너비가 특정 값보다 작거나 같을 때 적용된다</li>\n<li>min-width: 화면 너비가 특정 값보다 클 때 적용된다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* 768px 이하일 때 스타일 적용 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 스타일 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 1024px 이상일 때 스타일 적용 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1024px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 스타일 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"max-height--min-height\" style=\"position:relative;\"><a href=\"#max-height--min-height\" aria-label=\"max height  min height permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>max-height / min-height’</h3>\n<ul>\n<li>화면 높이에 따라 스타일을 적용한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 높이가 600px 이하일 때 적용 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"복합조건\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%ED%95%A9%EC%A1%B0%EA%B1%B4\" aria-label=\"복합조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복합조건</h3>\n<ul>\n<li>여러 조건을 논리 연산자(and, not, only)로 조합 가능하다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1024px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 화면 너비가 768px 이상 1024px 이하일 때 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 세로 모드일 때 적용 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1024px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 디스플레이 화면이 있고 너비가 768px ~ 1024px인 디바이스에만 스타일 적용 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\">기본 문법</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC-%EC%A1%B0%EA%B1%B4\">미디어 쿼리 조건</a></p>\n<ul>\n<li><a href=\"#max-width--min-width\">max-width / min-width</a></li>\n<li><a href=\"#max-height--min-height\">max-height / min-height’</a></li>\n<li><a href=\"#%EB%B3%B5%ED%95%A9%EC%A1%B0%EA%B1%B4\">복합조건</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"CSS 미디어 쿼리 웹 페이지를 다양한 기기와 화면 크기에서 최적화하기 위해 CSS 스타일을 조건부로 적용하는 기능이다 반응형 웹 디자인(Responsive Web Design)의 핵심 도구로, 화면 크기, 해상도, 색상 모드 등 다양한 기기 특성에 따라 스타일을 변경할 수 있다 기본 문법 조건 부분이 만족될때 해당 스타일이 적용된다 예시 화면 너비가 768px 이하일 경우에 font-size 14px이 적용된다 미디어 쿼리 조건 max-width / min-width max-width: 화면 너비가 특정 값보다 작거나 같을 때 적용된다 min-width: 화면 너비가 특정 값보다 클 때 적용된다 max-height / min-height’ 화면 높이에 따라 스타일을 적용한다 복합조건 여러 조건을 논리 연산자(and, not, only)로 조합 가능하다 기본 문법 예시 미디어 쿼리 조건 max-width / min-width max-height / min-height’ 복합조건","frontmatter":{"date":"November 26, 2024","title":"Day 7 미디어 쿼리","categories":"프로그래머스","author":"중석","emoji":"👨🏻‍💻"},"fields":{"slug":"/Programmers/Day7/"}},"next":{"id":"4d99fdbc-5466-5b4a-bf6f-ecdfee402903","html":"<h1 id=\"브라우저의-동작-과정\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"브라우저의 동작 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저의 동작 과정</h1>\n<ol>\n<li>HTML로부터 DOM 트리를, CSS로부터 CSSOM 트리를 생성한다</li>\n<li>DOM 및 CSSOM을 결합하여 렌더 트리를 형성한다</li>\n<li>렌더 트리에서 레이아웃을 실행하여 각 노드의 기하학적 형태를 계산한다</li>\n<li>개별 노드를 화면에 페인트한다</li>\n</ol>\n<h2 id=\"파싱\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%8B%B1\" aria-label=\"파싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파싱</h2>\n<p>먼저 DOM트리와 CSSOM 트리를 생성하는 과정을 알기전에 <strong>파싱</strong>이란 개념을 알고 가는 것이 좋을 듯 하다</p>\n<ul>\n<li>파싱(Parsing): 토큰화된 코드를 구조화하는 과정을 말한다</li>\n<li>파서(Parser): 파싱 과정을 전문적으로 해주는 부분</li>\n<li>토큰화 : 의미가 있는 최소 단위로 코드를 쪼개는 것을 의미한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div>&lt;/div> 라는 코드를 토큰화 하면 ['&lt;','div','>','&lt;/','div','>'] 처럼 나타낼 수 있다\n</code></pre></div>\n<h2 id=\"html-파싱\" style=\"position:relative;\"><a href=\"#html-%ED%8C%8C%EC%8B%B1\" aria-label=\"html 파싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 파싱</h2>\n<img src=\"https://velog.velcdn.com/images/joyoung/post/ed81e2d4-6865-4523-a689-4b9d4965caeb/image.png\">\n<p>출처: <a href=\"https://velog.io/@joyoung/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\">https://velog.io/@joyoung/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95</a></p>\n<p>브라우저는 위에서 말한 토큰화 된 HTML 문자열들을 이용해 **파스 트리(Parse Tree)**를 생성한다\n파스 트리는 브라우저가 읽어야 할 HTML 코드를 트리 모양으로 구조화하여 나타낸 것입니다</p>\n<p>만들어진 파스트리를 이용해 DOM 트리를 생성한다.</p>\n<p>과정:</p>\n<h3 id=\"dom-트리와-파스트리의-차이점\" style=\"position:relative;\"><a href=\"#dom-%ED%8A%B8%EB%A6%AC%EC%99%80-%ED%8C%8C%EC%8A%A4%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"dom 트리와 파스트리의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 트리와 파스트리의 차이점</h3>\n<p>파스 트리는 토큰화 된 문자열을 단순하게 구조화한 트리에 불과하지만,\nDOM 트리는 우리가 실제로 상호작용할 수 있는 HTML 엘리먼트로 이루어진 트리입니다.\n즉 실제 JavaScript를 가지고 동작하게 하는 것은 DOM 트리이다.</p>\n<p>결론 => 파스 트리 : js로 컨트롤 불가, DOM 트리 : js로 컨트롤 가능</p>\n<h3 id=\"html-파서-특징\" style=\"position:relative;\"><a href=\"#html-%ED%8C%8C%EC%84%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"html 파서 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 파서 특징</h3>\n<ol>\n<li>오류에 너그럽다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;body>\n&lt;p class=highLight> Hello\n&lt;div>&lt;span>World</code></pre></div>\n<ul>\n<li>문제점: 닫는 태그가 작성되지 않았고 class 값을 \"\" 감싸지 않음</li>\n<li>속성에 의해 에러를 복구한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;body>\n  &lt;p class=\"highLight\">Hello&lt;/p>\n  &lt;div>&lt;span>World&lt;/span>&lt;/div>\n&lt;/body></code></pre></div>\n<ul>\n<li>오류를 복구해 위와 같이 완성된 코드를 작성한다</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>파싱 과정이 중단될 수 있다\nHTML 파싱 도중 script, link 같은 외부 태그를 만나게 되면 HTML 파싱을 중단한다.\n그리고 해당 태그의 해석을 실행하게 되는데 외부 파일을 참조하고 있다면 다운로드를 한 후 해석을 시작한다</p>\n</li>\n<li>\n<p>재시작\nHTML 파싱 과정은 어떠한 외부 요인을 방해 받을 수 있다. 파싱 중간에 외부의 요인으로 인해 DOM 추가, 변경, 삭제 될 수 있기 때문이다. 이렇게 되면 HTML은 처음부터 다시 파싱 과정을 거친다. 즉 바이트를 문자로 변환 -> 토큰화 -> DOM트리 생성. 때문에 처리해야 할 HTML이 많을 때에는 파싱 시간이 오래 걸릴 수 있다</p>\n</li>\n</ol>\n<h2 id=\"css-파싱\" style=\"position:relative;\"><a href=\"#css-%ED%8C%8C%EC%8B%B1\" aria-label=\"css 파싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 파싱</h2>\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*oCc4pqsL_RK0x9ZPyddd3w.png\">\n<p>출처: <a href=\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*oCc4pqsL_RK0x9ZPyddd3w.png\">https://miro.medium.com/v2/resize:fit:1400/format:webp/1*oCc4pqsL_RK0x9ZPyddd3w.png</a></p>\n<p>일반적으로 CSS link태그가 HTML 코드 내에 삽입되어 있어 HTML을 파싱하는 도중에 CSS파싱이 시작된다.\nHTML 파서는 네트워크를 통해 먼저 받아온 코드부터 해석하지만 CSS 파서는 전체 파일을 모두 다운로드 할때까지 파싱을 시작할 수 없다.</p>\n<p>파싱 과정이 끝나면 다운로드한 내용과 순서를 바탕으로 DOM 트리와 같은 구조인 <strong>CSSOM 트리</strong>를 생성한다.\n<strong>CSSOM 트리</strong>는 스타일, 규칙, 선택자 등의 정보가 노드에 들어가게 된다</p>\n<h2 id=\"렌더-트리\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC\" aria-label=\"렌더 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더 트리</h2>\n<p>DOM 트리가 구성되는 동안 브라우저는 <strong>렌더 트리</strong> 동의어로는 <strong>프레임 트리</strong>를 구성하기 시작한다<br>\n렌더 트리 : 화면에 나타나는 요소들을 결정하는 트리</p>\n<img src=\"https://velog.velcdn.com/images/joyoung/post/3dbe331d-37d4-4a23-b8bc-fae8c7ecc56b/image.png\">\n<p>출처: <a href=\"https://velog.io/@joyoung/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\">https://velog.io/@joyoung/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95</a></p>\n<p>렌더 트리는 DOM 트리와 CSSOM 트리를 조합하여 만들어지고, 이 때 화면에 그려지지 않는 요소들은 트리에 나타나지 않는다</p>\n<h2 id=\"레이아웃-또는-리플로우\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EB%98%90%EB%8A%94-%EB%A6%AC%ED%94%8C%EB%A1%9C%EC%9A%B0\" aria-label=\"레이아웃 또는 리플로우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레이아웃 또는 리플로우</h2>\n<p>레이아웃 단계에서는 렌더 트리에서 계산되지 않았던 노드들의 크기와 위치, 레이어 간 순서와 같은 정보를 계산 하여 좌표에 나타냅니다. 브라우저는 레이아웃 단계에서 요소의 크기, 위치, 가시성 등을 결정하고 렌더링에 대한 최적의 배치를 계산합니다.</p>\n<h2 id=\"페인트\" style=\"position:relative;\"><a href=\"#%ED%8E%98%EC%9D%B8%ED%8A%B8\" aria-label=\"페인트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>페인트</h2>\n<p>페인트는 마지막 단계 입니다. 이 과정에서 브라우저는 CSS 스타일, 배경, 그림자, 그림 등을 고려하며, 여러 개층으로 구성된 렌더링 요소들을 하나의 이미지로 합치는 과정도 포함된다.</p>\n<p>문서가 클수록 브라우저의 수행 작업량이 많아지며, 스타일이 복잡할수록 페인팅에 걸리는 시간도 늘어난다</p>\n<h1 id=\"dom\" style=\"position:relative;\"><a href=\"#dom\" aria-label=\"dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM</h1>\n<h2 id=\"dom-1\" style=\"position:relative;\"><a href=\"#dom-1\" aria-label=\"dom 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM</h2>\n<p>DOM이란 Document Object Model의 약자이며 <strong>스크립트 언어와 프로그래밍 언어를 통해 웹 문서(HTML과 같은 정적인 문서)를 쉽게 제어할 수 있게 하기 위해 문서를 객체화한 것을 말한다</strong></p>\n<ul>\n<li>문서 객체화: HTML 같은 정적인 문서를 트리 구조의 객체로 변환한 것을 의미한다</li>\n</ul>\n<h2 id=\"dom-트리\" style=\"position:relative;\"><a href=\"#dom-%ED%8A%B8%EB%A6%AC\" aria-label=\"dom 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 트리</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Document\n└── html\n    ├── head\n    │   ├── title\n    │   │   └── \"My Webpage\"\n    │   └── &lt;!-- \"Head section ends here\" -->\n    └── body\n        ├── header\n        │   └── h1\n        │       └── \"Welcome\"\n        ├── main\n        │   └── p\n        │       └── \"This is a paragraph.\"\n        └── footer\n            └── p\n                └── \"Footer info.\"\n\n</code></pre></div>\n<ul>\n<li>웹 브라우저가 HTML 문서를 읽어 들이면 위에 그림처럼 Document 객체로 시작하는 DOM트리가 만들어 진다</li>\n<li>트리를 구성하는 각 요소들을 <strong>노드</strong>라고 부른다</li>\n<li>트리에 있는 노드는 <strong>모두 객체다</strong></li>\n</ul>\n<h2 id=\"dom-노드\" style=\"position:relative;\"><a href=\"#dom-%EB%85%B8%EB%93%9C\" aria-label=\"dom 노드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 노드</h2>\n<ul>\n<li>DOM 노드는 문서의 모든 구성 요소(요소, 텍스트, 속성 등)를 표현하는 객체다</li>\n<li>각각의 노드는 유형별로 역할과 속성을 가지며, JavaScript를 통해 프로그래밍적으로 조작할 수 있다</li>\n<li>DOM 노드는 문서와 프로그래밍 언어 간의 다리 역할을 하여, 동적인 웹 콘텐츠 제작을 가능하게 합니다.</li>\n</ul>\n<h3 id=\"노드-종류\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%93%9C-%EC%A2%85%EB%A5%98\" aria-label=\"노드 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>노드 종류</h3>\n<ul>\n<li>문서노드: document이자 최상위 노드를 의미한다 (DOM에 진입하기 위한 시작점)</li>\n<li>요소노드: html의 태그를 의미한다 (예시: div, p)</li>\n<li>속성노드: 요소노드(태그)의 속성들을 의미한다 ex ) href, alt 등</li>\n<li>텍스트 노드: 요소노드(태그)의 텍스트를 의미한다. (DOM 트리의 단말 노드)</li>\n<li>주석 노드: HTML 주석을 의미하며 주석도 DOM 트리의 일부이며, 노드 유형으로 관리된다</li>\n</ul>\n<h3 id=\"dom-노드와-dom-요소의-관계\" style=\"position:relative;\"><a href=\"#dom-%EB%85%B8%EB%93%9C%EC%99%80-dom-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"dom 노드와 dom 요소의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 노드와 DOM 요소의 관계</h3>\n<ul>\n<li>DOM 노드가 더 큰 개념이며, DOM 요소는 그중 HTML 태그를 나타내는 특정 노드 유형입니다.</li>\n<li>DOM 노드는 <strong>모든 구성 요소 (요소, 텍스트, 문서, 주석 등)를 포함 하지만 DOM 요소는 요소 노드만 포함</strong>하다는 차이가 있다</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%8B%B1\">파싱</a></p>\n</li>\n<li>\n<p><a href=\"#html-%ED%8C%8C%EC%8B%B1\">HTML 파싱</a></p>\n<ul>\n<li><a href=\"#dom-%ED%8A%B8%EB%A6%AC%EC%99%80-%ED%8C%8C%EC%8A%A4%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">DOM 트리와 파스트리의 차이점</a></li>\n<li><a href=\"#html-%ED%8C%8C%EC%84%9C-%ED%8A%B9%EC%A7%95\">HTML 파서 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#css-%ED%8C%8C%EC%8B%B1\">CSS 파싱</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC\">렌더 트리</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EB%98%90%EB%8A%94-%EB%A6%AC%ED%94%8C%EB%A1%9C%EC%9A%B0\">레이아웃 또는 리플로우</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8E%98%EC%9D%B8%ED%8A%B8\">페인트</a></p>\n</li>\n<li>\n<p><a href=\"#dom\">DOM</a></p>\n</li>\n<li>\n<p><a href=\"#dom-%ED%8A%B8%EB%A6%AC\">DOM 트리</a></p>\n</li>\n<li>\n<p><a href=\"#dom-%EB%85%B8%EB%93%9C\">DOM 노드</a></p>\n<ul>\n<li><a href=\"#%EB%85%B8%EB%93%9C-%EC%A2%85%EB%A5%98\">노드 종류</a></li>\n<li><a href=\"#dom-%EB%85%B8%EB%93%9C%EC%99%80-dom-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B4%80%EA%B3%84\">DOM 노드와 DOM 요소의 관계</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 25, 2024","title":"WTL 1회차 브라우저 동작원리, DOM - 1차 프로젝트 5팀","categories":"프로그래머스","author":"중석","emoji":"👨🏻‍💻"},"fields":{"slug":"/Programmers/WTL1/"}},"prev":{"id":"5a0720e7-0daf-5050-a21d-45b33d17d097","html":"<h1 id=\"자바스크ㄹ비트-작성-유형\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%E3%84%B9%EB%B9%84%ED%8A%B8-%EC%9E%91%EC%84%B1-%EC%9C%A0%ED%98%95\" aria-label=\"자바스크ㄹ비트 작성 유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크ㄹ비트 작성 유형</h1>\n<h2 id=\"internal내부-방식\" style=\"position:relative;\"><a href=\"#internal%EB%82%B4%EB%B6%80-%EB%B0%A9%EC%8B%9D\" aria-label=\"internal내부 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>internal(내부) 방식</h2>\n<ul>\n<li>인라인 방식으로 HTML 속성 내부에 짧게 작성하는 방법</li>\n<li>아주 짧게 쓰는 것을 권장하고 주로 함수 호출을 통해 문자를 늘려서 활용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">인라인 방식</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>alert 버튼<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"external외부에서-호출하는-방법\" style=\"position:relative;\"><a href=\"#external%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%ED%98%B8%EC%B6%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"external외부에서 호출하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>External(외부)에서 호출하는 방법</h2>\n<ul>\n<li>단, js 코드 특성상 외부에서만 로드하는 것은 불가능해 internal 방식과 섞어서 사용한다</li>\n<li>script 태그 안에 js 외부파일 경로를 src에 입력 해주면 된다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>01_external.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"변수-정의-및-키워드\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%A0%95%EC%9D%98-%EB%B0%8F-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"변수 정의 및 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 정의 및 키워드</h2>\n<p>변수: JS에서 값을 저장하는 공간이다. 쉽게 말해 빈 박스 => 변수 , 박스 안에 들어있는 물건 => 값 이라고 생각해도 좋다</p>\n<p>변수 선언 키워드</p>\n<ul>\n<li>var : ES6 이전 문법에서 사용된 키워드지만 ES6 이후로는 잘 쓰지 않음 ex) var value = 10;</li>\n<li>let(ES6) : 블록 스코프를 가지는 변수로 완벽한 지역변수 ex) let value = 10;</li>\n<li>const(ES6) : 상수로 선언시 활용, 값이 한번 정해지면 변경 불가! ex) const = 10;</li>\n</ul>\n<h2 id=\"문자열--숫자-혼합-사용\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4--%EC%88%AB%EC%9E%90-%ED%98%BC%ED%95%A9-%EC%82%AC%EC%9A%A9\" aria-label=\"문자열  숫자 혼합 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 + 숫자 혼합 사용</h2>\n<ul>\n<li>문제점: 문자열 + 숫자 = 문자, 문자/숫자 혼합되는 경우 우선순위 이슈가 발생할 수 있음</li>\n<li>해결법: 괄호를 사용해라!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello '</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 더블 쿼테이션으로 문자열 표기 가능</span>\n<span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">+</span> num1 <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 출력값: hello 201000</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력값: hello 1020</span></code></pre></div>\n<h3 id=\"분석\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%84%9D\" aria-label=\"분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분석</h3>\n<p>console.log(str1 + num1 + 1000)의 동작 과정</p>\n<ol>\n<li>str1(문자열) + num1 (숫자)는 숫자를 문자열로 변환 => 문자열 hello 20을 출력하게 된다</li>\n<li>hello 20(문자열) + 1000(숫자) => 문자열 hello 201000을 출력하게 된다</li>\n</ol>\n<p>console.log(str1 + (num1 + 1000)) , 괄호 사용</p>\n<ol>\n<li>( )를 사용함으로 우선순위를 정해준다</li>\n<li>우선순위로 인해 num1(숫자) + 1000(숫자) => 1020을 출력한다</li>\n<li>str1(문자열) + 1020(숫자) => hello 1020을 출력한다</li>\n</ol>\n<h2 id=\"var-호이스팅-및-이슈\" style=\"position:relative;\"><a href=\"#var-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EB%B0%8F-%EC%9D%B4%EC%8A%88\" aria-label=\"var 호이스팅 및 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var 호이스팅 및 이슈</h2>\n<ul>\n<li>변수 선언이 함수 또는 전역 코드의 상단에 이동하는 것을 “호이스팅(hoisting)“이라 말한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 실제 코드</span>\nbla <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bla<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 호이스팅 적용된 코드</span>\n<span class=\"token keyword\">var</span> bla<span class=\"token punctuation\">;</span>\nbla <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"호이스팅-이슈\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%9D%B4%EC%8A%88\" aria-label=\"호이스팅 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호이스팅 이슈</h2>\n<ul>\n<li>var는 JavaScript에서 사실상 전역적인 변수 활용의 키워드로 이해 하면 편하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 전역</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined 원래는 ReferenceError가 발생해야됨</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Mike\"</span></code></pre></div>\n<p>위 코드를 호이스팅의 개념으로 정리하면 아래와 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">//→ 선언된 변수가 최상위로 올라왔다</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name이란 변수가 선언은 됐지만 값이 없어 undefined를 출력한다</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//→ 그러나 값은 올라가지 못한다. 따라서 값은 할당해주어야 한다</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mike란 값이 할당되어 Mike를 출력한다</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#internal%EB%82%B4%EB%B6%80-%EB%B0%A9%EC%8B%9D\">internal(내부) 방식</a></p>\n</li>\n<li>\n<p><a href=\"#external%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%ED%98%B8%EC%B6%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">External(외부)에서 호출하는 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98-%EC%A0%95%EC%9D%98-%EB%B0%8F-%ED%82%A4%EC%9B%8C%EB%93%9C\">변수 정의 및 키워드</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4--%EC%88%AB%EC%9E%90-%ED%98%BC%ED%95%A9-%EC%82%AC%EC%9A%A9\">문자열 + 숫자 혼합 사용</a></p>\n<ul>\n<li><a href=\"#%EB%B6%84%EC%84%9D\">분석</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#var-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EB%B0%8F-%EC%9D%B4%EC%8A%88\">var 호이스팅 및 이슈</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%9D%B4%EC%8A%88\">호이스팅 이슈</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 27, 2024","title":"Day 8 JS변수, var 호이스팅 개념과 이슈","categories":"프로그래머스","author":"중석","emoji":"👨🏻‍💻"},"fields":{"slug":"/Programmers/Day8/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/dony0720","comments":{"utterances":{"repo":"dony0720/dony0720.github.io"}}}}},"pageContext":{"slug":"/Programmers/Day7/","nextSlug":"/Programmers/WTL1/","prevSlug":"/Programmers/Day8/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}