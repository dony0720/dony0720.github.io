{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Git","result":{"pageContext":{"currentCategory":"Git","categories":["All","Algorithm","Git","React","Js","Book","Mission","CSS"],"edges":[{"node":{"id":"eec54202-2c81-5808-ab1d-7da562142a4c","excerpt":"git checkout -t 에 대해서 아래와 같이 명령어를 진행하면 원격에 있는 브랜치를 로컬로 가져올 수 있다. (여기서 origin은 로컬내에 저장되어 있는 원격 저장소의 주소이다.) fatal: ‘origin/main’ is not a commit and a branch ‘main’ cannot be created from it 프로젝트를 진행하면서 github의 feature/MonthChip 브랜치에서 pull을 받아올려고 했는데 위와 같은 에러가 발생 했다. 해결 방법 구글링 결과 후 아래와 같이 실행해서 해결할 수 있었다! git checkout -t 에 대해서 fatal: ‘origin/main’ is not a commit and a branch ‘main’ cannot be created from it 해결 방법 참조 링크 https://velog.io/@burningjeong/fatal-originmain-is-not-a-commit-and-a-branch-m…","fields":{"slug":"/Git/git_checkout-t/"},"frontmatter":{"categories":"Git","title":"git checkout -t","date":"March 26, 2024"}},"next":{"fields":{"slug":"/React/Mui/"}},"previous":{"fields":{"slug":"/Algorithm/problem기초(4-4)/"}}},{"node":{"id":"48692518-edfd-5930-99ee-82e2f71732f8","excerpt":"Git 커밋 메시지는 왜 중요할까 잘 만든 커밋 메시지는 다른 개발자에게 변경 사항을 전달하는\r\n가장 쉽고 간편한 방법이기 때문입니다. 그래서 기업의 대규모 프로젝트는\r\n당연하고 협력의 비중이 낮은 소규모의 사이드 프로젝트에서도\r\n커밋 컨벤션을 따로 만들어서 규칙을 지키기도 합니다. 커밋 컨벤션이란? git 커밋 메시지 컨벤션(Git Commit Message Convention)이란\r\n프로젝트 참여자들이 일관된 형식의 커밋 메시지를 작성하기 위한 규칙을 말합니다.\r\n현재 여러 개발자 사이에서 관습적으로 통용되는 가이드라인이 있지만,\r\n각 프로젝트에 따라서 별도의 규칙을 만들어 적용하기도 한다고 합니다. 커밋 메시지를 왜 사용할까요? git에서 변경 사항을 저장하기 전에 수많은 변경 사항을 적용했을 수 있으므로\r\n저장할 변경 사항을 git에 알려야 합니다. 가장 좋은 방법은 커밋 메시지를 추가하여\r\n변경 사항을 식별하는 것이기 때문에 커밋 메시지를 사용합니다. 커밋 메시지를 잘 작…","fields":{"slug":"/Git/git_commitMessage/"},"frontmatter":{"categories":"Git","title":"Git 커밋 메시지의 중요성","date":"June 09, 2023"}},"next":{"fields":{"slug":"/Js/nullish/"}},"previous":{"fields":{"slug":"/React/React (1)/"}}},{"node":{"id":"b7833f51-4b85-5e05-a094-020cf75780d4","excerpt":"Git Rebase란? Git Rebase 란 말 그대로 base를 재설정한다는 의미로, 하나의 브랜치가 다른 브랜치에서 파생되서 나온 경우, 다른 브랜치에서 진행된 커밋을 다시 가져와서 base를 재설정하는 것입니다. Rebase 진행 과정 \r\n위 예제는 아래와 같은 명령으로 Rebase 한다. experiment 브랜치로 이동해 master를 base삼아 Rebase 하겠다는 의미입니다. 그러면 내부에서는 master가 base가 되고, C3과 C4의 차이를 임시 저장하는 공간에 저장합니다. 이 임시저장 공간을 라고 합니다. 그리고 base가 되는 master에 Patch들이 적용됩니다 위 내용을 정리해보면 공통 커밋(C2)에서 시작해서 현재 체크아웃한 experiment 브랜치가 가리키는 커밋까지 diff를 차례대로 만들어 Patch에 저장 experiment브랜치가 master브랜치를 가리키게 함 C3에 Patch를 순서대로 적용  마지막으로 아래 명령어로 master 브랜…","fields":{"slug":"/Git/git_Rebase/"},"frontmatter":{"categories":"Git","title":"Git Rebase에 대해서","date":"May 19, 2023"}},"next":{"fields":{"slug":"/Mission/mission1-3/"}},"previous":{"fields":{"slug":"/Mission/mission1-5/"}}},{"node":{"id":"adda7d15-e4c1-5102-874d-f6d729d1a35f","excerpt":"Branch merge 현재 작업하고 있는 branch 내용이 다른 branch에서도 필요할때 사용된다.  : 병합하기 이전의 서로 다른 branch의 공통의 부모  : 서로 다른 branch를 병합한 새로운 버전 다른 파일을 병합하는 경우 같은  파일에서 다른 부분을 병합하는 경우 원하는 내용을 원하는 branch에 병합하기 위해서 아래와 같이 진행해야 한다. 을 사용해 HEAD를 원하는 branch로 이동시켜야한다. git merge (병합할 내용의 branch명) 같은 파일에서 같은 부분을 병합하는 경우-> 충돌 위와 같은 방법으로 merge를 시도하면 conflict(충돌)가 발생한다\r\n그래서 우리는 충돌이 일어난 부분만 수동으로 수정해주면\r\n가 되는 것는 것을 확인할 수 있다. 2way merge 서로 다른 2개의 branch를 병합할때 같은 부분의 내용이 서로 다르면 충돌이 일어나게 된다. here there 설명 a a 2개의 내용이 같이 a로 병합한다 b s 충돌이 …","fields":{"slug":"/Git/git2/"},"frontmatter":{"categories":"Git","title":"Git에 대해서 (2)","date":"March 30, 2023"}},"next":{"fields":{"slug":"/Git/git/"}},"previous":{"fields":{"slug":"/Canvas/Canvas(3)/"}}},{"node":{"id":"c388d67d-9737-53ee-8980-3a16f6073053","excerpt":"버전관리 버전 생성 : 파일을 수정하는 곳 : 곧 커밋할 파일에 대한 정보를 저장하는 곳 : 만들어진 버전을 저장하는 곳이다. 즉, 우리가 저장소라가고 불리는 곳이다. : 한번도 버전 관리하지 않은 파일 : 버전을 만들기 위해 파일을 Staging Area 올린다.  -m 은 메세지의 약자이고, 뒤에 \"\"안에 공유할 메시지 내용을 적어주시면 됩니다. 파일이 Repository로 가게 된다. 즉, 버전을 생성한다.  add 되야하는 파일이 있거나 delete 된 파일이 있는 상태 일때, 알아서 add 가 진행된 후 commit 이 된다. 단 최초 한번의 add가 되어있어야 사용할 수  있다.  에서 적고자하는 메시지를 넣는걸 추가한 것이다. 와 똑같이 add가 진행된 후에 자동으로 commit이 된다.  과 git 의 차이점 은 지역저장소(local Repository)에 변경사항을 기록한다. 는 커밋된 변경사항을 원격저장소(remote Repository)에 업로드한다. 즉 은 지…","fields":{"slug":"/Git/git/"},"frontmatter":{"categories":"Git","title":"Git에 대해서 (1)","date":"March 30, 2023"}},"next":{"fields":{"slug":"/Todolist/todoCss/"}},"previous":{"fields":{"slug":"/Git/git2/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}