{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Git","result":{"pageContext":{"currentCategory":"Git","categories":["All","Git","Mission","Js","Book","DOM","Canvas","TodoList","CSS","Box-model"],"edges":[{"node":{"id":"b7833f51-4b85-5e05-a094-020cf75780d4","excerpt":"Git Rebase란? Git Rebase 란 말 그대로 base를 재설정한다는 의미로, 하나의 브랜치가 다른 브랜치에서 파생되서 나온 경우, 다른 브랜치에서 진행된 커밋을 다시 가져와서 base를 재설정하는 것입니다. Rebase 진행 과정 \r\n위 예제는 아래와 같은 명령으로 Rebase 한다. experiment 브랜치로 이동해 master를 base삼아 Rebase 하겠다는 의미입니다. 그러면 내부에서는 master가 base가 되고, C3과 C4의 차이를 임시 저장하는 공간에 저장합니다. 이 임시저장 공간을 라고 합니다. 그리고 base가 되는 master에 Patch들이 적용됩니다 위 내용을 정리해보면 공통 커밋(C2)에서 시작해서 현재 체크아웃한 experiment 브랜치가 가리키는 커밋까지 diff를 차례대로 만들어 Patch에 저장 experiment브랜치가 master브랜치를 가리키게 함 C3에 Patch를 순서대로 적용  마지막으로 아래 명령어로 master 브랜…","fields":{"slug":"/Git/git_Rebase/"},"frontmatter":{"categories":"Git","title":"Git Rebase에 대해서","date":"May 19, 2023"}},"next":{"fields":{"slug":"/Mission/mission1-3/"}},"previous":null},{"node":{"id":"adda7d15-e4c1-5102-874d-f6d729d1a35f","excerpt":"Branch merge 현재 작업하고 있는 branch 내용이 다른 branch에서도 필요할때 사용된다.  : 병합하기 이전의 서로 다른 branch의 공통의 부모  : 서로 다른 branch를 병합한 새로운 버전 다른 파일을 병합하는 경우 같은  파일에서 다른 부분을 병합하는 경우 원하는 내용을 원하는 branch에 병합하기 위해서 아래와 같이 진행해야 한다. 을 사용해 HEAD를 원하는 branch로 이동시켜야한다. git merge (병합할 내용의 branch명) 같은 파일에서 같은 부분을 병합하는 경우-> 충돌 위와 같은 방법으로 merge를 시도하면 conflict(충돌)가 발생한다\r\n그래서 우리는 충돌이 일어난 부분만 수동으로 수정해주면\r\n가 되는 것는 것을 확인할 수 있다. 2way merge 서로 다른 2개의 branch를 병합할때 같은 부분의 내용이 서로 다르면 충돌이 일어나게 된다. here there 설명 a a 2개의 내용이 같이 a로 병합한다 b s 충돌이 …","fields":{"slug":"/Git/git2/"},"frontmatter":{"categories":"Git","title":"Git에 대해서 (2)","date":"March 30, 2023"}},"next":{"fields":{"slug":"/Git/git/"}},"previous":{"fields":{"slug":"/Canvas/Canvas(4)/"}}},{"node":{"id":"c388d67d-9737-53ee-8980-3a16f6073053","excerpt":"버전관리 버전 생성 : 파일을 수정하는 곳 : 곧 커밋할 파일에 대한 정보를 저장하는 곳 : 만들어진 버전을 저장하는 곳이다. 즉, 우리가 저장소라가고 불리는 곳이다. : 한번도 버전 관리하지 않은 파일 : 버전을 만들기 위해 파일을 Staging Area 올린다.  -m 은 메세지의 약자이고, 뒤에 \"\"안에 공유할 메시지 내용을 적어주시면 됩니다. 파일이 Repository로 가게 된다. 즉, 버전을 생성한다.  add 되야하는 파일이 있거나 delete 된 파일이 있는 상태 일때, 알아서 add 가 진행된 후 commit 이 된다. 단 최초 한번의 add가 되어있어야 사용할 수  있다.  에서 적고자하는 메시지를 넣는걸 추가한 것이다. 와 똑같이 add가 진행된 후에 자동으로 commit이 된다.  과 git 의 차이점 은 지역저장소(local Repository)에 변경사항을 기록한다. 는 커밋된 변경사항을 원격저장소(remote Repository)에 업로드한다. 즉 은 지…","fields":{"slug":"/Git/git/"},"frontmatter":{"categories":"Git","title":"Git에 대해서 (1)","date":"March 30, 2023"}},"next":{"fields":{"slug":"/Todolist/todoCss/"}},"previous":{"fields":{"slug":"/Git/git2/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}